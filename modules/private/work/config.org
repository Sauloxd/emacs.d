#+TITLE: Emacs Work Config
#+AUTHOR: Florian SchrÃ¶dl (floscr)
#+PROPERTY: header-args :tangle yes
#+STARTUP: org-startup-folded: content
#+BEGIN_SRC emacs-lisp
;; -*- lexical-binding: t -*-
#+END_SRC

* Configuration
** Required Packages

#+BEGIN_SRC elisp
(require 'dash)
(require 's)
#+END_SRC

** Utils
*** Alternate File

#+BEGIN_SRC elisp
(setq +MM-alternate-file-rules '(("component.js" "controller.js")))

(defun +MM|alternate-file ()
  "Find the alternate file for the current buffer."
  (interactive)
  (let* ((file-name (file-name-nondirectory buffer-file-name))
         (file-dir-path (file-name-directory buffer-file-name))
         (alternate-file
          (-some-->
              (or
               ;; Regular alternate files
               (-some--> +MM-alternate-file-rules
                 (--first (-contains? it file-name) it)
                 (--first (not (string= file-name it)) it))

               (-some--> (s-split "\\." file-name)
                 (car it)
                 (f-entries file-dir-path (lambda (file)
                                            (let ((entry-file-name (f-filename file)))
                                              (and
                                               (not (string= entry-file-name file-name))
                                               (s-contains? it entry-file-name)))))
                 (-map 'f-filename it)
                 (if (eq (length it) 1)
                     (car it)
                   (ivy-read "File: " it))))

            (find-file (f-join file-dir-path it)))))))
#+END_SRC

*** Convert to new Redux style

#+BEGIN_SRC elisp
(defun +MM|convert-to-new-redux-style ()
  "Converts the current buffer to the new redux style."
  (interactive)
  (shell-command (template "jscodeshift --dry --print --silent --transform ~/Code/Meisterlabs/jscodeshift/redux/v5.8.0/actions-controllers.js <<(buffer-file-name)>>") (current-buffer)))
#+END_SRC

*** Create action

Create an action from a controller and import directly

#+BEGIN_SRC elisp
(defun +MM|create-action ()
  "Create an action file from a controller file"
  (interactive)
  (let* ((action-name (read-string "Action Name: "))
         (root-dir (file-name-directory (buffer-file-name)))
         (actions-dir (concat root-dir "actions/"))
         (actions-index-file (concat actions-dir "index.js"))
         (action-file (concat actions-dir (concat action-name ".js"))))
    (unless (file-directory-p actions-dir) (mkdir actions-dir))
    (copy-file
     (concat (projectile-project-root) "snippets/Core/Action.js")
     action-file)
    (with-temp-file actions-index-file
      (+js|generate-index actions-dir))
    (find-file action-file)))
#+END_SRC

*** Create canvas action

Create a canvas action

#+BEGIN_SRC elisp
(defun +MM|canvas-create-action ()
  "Create an action file from a controller file"
  (interactive)
  (let* ((action-name (read-string "Action Name: "))
         (actions-dir (f-join (projectile-project-root) "src/containers/MapEditor/actions"))
         (actions-index-file (f-join actions-dir "index.js"))
         (action-file (f-join actions-dir (concat action-name ".js"))))
    (copy-file
     (f-join (projectile-project-root) "snippets/Core/Action.js")
     action-file)
    (with-temp-file actions-index-file
      (+js|generate-index actions-dir))
    (find-file action-file)))
#+END_SRC

*** Create container

#+BEGIN_SRC elisp
(defun +MM|create-container ()
  "Create a container from the snippets directory."
  (interactive)
  (let* ((root-path (projectile-project-root))
         (container-snippet-path (f-join root-path "snippets/Core/Container"))
         (containers-path (f-join root-path "src/containers"))
         (container-names (->> (f-directories containers-path)
                               (-map 'file-name-nondirectory)))
         (new-container-name (ivy-read "Container Name: " container-names))
         (new-container-path (f-join containers-path new-container-name)))
    (if (f-exists? new-container-path)
        (progn
          (message "The given directory already exists")
          (+MM|create-container))
      (progn
        (f-copy container-snippet-path new-container-path)
        (find-file (f-join root-path "src/apps/Main/App.js"))
        ;; Copy require stament to be inserted to app to the clipboard
        (--> (f-join root-path "src/")
             (s-chop-prefix it new-container-path)
             (template "'<<new-container-name>>': require('<<it>>/controller'),\n")
             (progn
               (kill-new it)
               (message (template "Created container and copied <<(s-chomp it)>> to the clipboard!"))))))))
#+END_SRC

*** Search MapEditor Only

**** Canvas Files

#+BEGIN_SRC elisp
(defun +MM|canvas-files ()
  "Project files but only for canvas"
  (interactive)
  (ivy-read "Find File: "
            (--filter (s-contains? "MapEditor" it) (projectile-current-project-files))
            :action (lambda (x) (find-file (f-join (projectile-project-root) x)))))
#+END_SRC
*** Insert tap

#+BEGIN_SRC elisp
(defun +MM|chain-tap-log (&optional str)
  "Adds a tap method to a chain."
  (interactive)
  (let ((str (or str "console.log")))
    (save-excursion
      (end-of-line)
      (newline-and-indent)
      (insert (template ".tap(<<str>>)"))
      (call-interactively #'evil-indent-line)
      (when current-prefix-arg
        (progn
          (evil-insert-newline-above)
          (next-line)
          (evil-insert-newline-below))))))


(defun +MM|chain-tap-log-state ()
  "Adds a tap method to a chain."
  (interactive)
  (+MM|chain-tap-log "x => console.log(x.state)"))
#+END_SRC
*** Insert debugger

#+BEGIN_SRC elisp
(defun +js|insert-debugger ()
  (interactive)
  (save-excursion
    (if current-prefix-arg
        (progn
          (evil-insert-newline-above))
      (evil-insert-newline-below))
    (insert "debugger;")
    (call-interactively #'evil-indent-line)))
#+END_SRC
*** NodeJs Repl

#+BEGIN_SRC elisp
(defun +MM|nodejs-repl ()
  "Start a repl with the standard library already loaded."
  (interactive)
  (if (not (get-buffer "*nodejs*"))
      (progn
        (nodejs-repl)
        (insert (concat
                 "const __T = require('@meisterlabs/common/node');"
                 "Object.keys(__T).forEach(x => { global[x] = __T[x]; });"))
        (comint-send-input nil t))
    (nodejs-repl)))
#+END_SRC

*** Update Schema Props

#+BEGIN_SRC elisp
(defun +MM|update-schema-props ()
  "Update the schema props with all types in the current schema function body."
  (interactive)
  (save-excursion
    (let* ((point-schema-line
            (progn
              (forward-line)
              (search-backward-regexp "[sS]chema(")
              (backward-char 1)
              (point)))
           (point-schema-body-start
            (progn
              (forward-line)
              (point)))
           (point-schema-body-end (progn
                                    (goto-char point-schema-line)
                                    (search-forward-regexp "{$")
                                    (forward-sexp)
                                    (point)))
           (imports-string
            (--> (buffer-substring-no-properties point-schema-body-start point-schema-body-end)
                 (s-match-strings-all
                  "\\(Array\\|String\\|Object\\|Maybe\\|Any\\|Either\\|Number\\|Boolean\\|Null\\|Store\\|Style\\)" it)
                 -uniq
                 (-map #'-last-item it)
                 (--reject (not (s-capitalized? it)) it)
                 (-sort 'string-lessp it)
                 (s-join ", " it)
                 (template "{ <<it>> }"))))
      (goto-char point-schema-line)
      (goto-char (point-at-bol))
      (while
          (or (re-search-forward "\\(Schema(function(\\)\\(.*\\)\\() {\\)" (point-at-eol) t)
              (re-search-forward "\\(schema(\\)\\(.*\\)\\() {\\)" (point-at-eol) t))
        ;; Fix for error "Match data clobbered by buffer modification hooks [5 times]"
        ;; https://www.gnu.org/software/emacs/manual/html_node/elisp/Saving-Match-Data.html
        (let ((data (match-data)))
          (unwind-protect
              (set-match-data data)
              (replace-match (template "\\1<<imports-string>>\\3"))))))))
#+END_SRC

** Packages
*** New Worktree

#+BEGIN_SRC elisp
(defun +MM|new-worktree ()
  "New worktree with the devpanel files and an npm install"
  (interactive)
  (let* ((origin-path (projectile-project-root))
         (path (call-interactively 'magit-worktree-branch-project-worktree))
         (local-devutil-file (f-join origin-path "src/apps/Main/DevPlugin.local.js"))
         (worktree-devutil-file (f-join path "src/apps/Main/DevPlugin.local.js")))
    (when (file-exists-p local-devutil-file)
      (copy-file local-devutil-file worktree-devutil-file))
    (npm-mode)
    (npm-mode-npm-ci)))
#+END_SRC

#+BEGIN_SRC elisp
(after! magit
  (transient-append-suffix 'magit-worktree "b" '("M" "+MM|Worktree" +MM|new-worktree)))
#+END_SRC
*** Import File

#+BEGIN_SRC elisp
(defconst +MM-header-start-regex "^/\\*\\* ")
(defconst +MM-header-end-regex " \\*\\*/")
(defconst +MM-comment-headers '("EXTERNALS" "LOCALS" "HELPERS" "MAIN"))
#+END_SRC

**** Main

#+BEGIN_SRC elisp
(defun +MM:import/get-local-imports ()
  "Get possible importable files in the current directory."
  (let ((dir default-directory))
    (-some->> (f-files dir (lambda (x)
                             (not (string= x buffer-file-name)))
                         t)
      (--map (s-replace dir "" it)))))

(defun +MM:import/get-package-imports ()
  "Get possible importable files in the current directory."
  (let ((dir projectile-project-root))
    (--> (concat "jq -r '.dependencies | keys | .[]' " (concat (projectile-project-root) "package.json"))
         shell-command-to-string
         split-string)))

(defun +MM:import/get-common-exports ()
  "Get all possible common package imports."
  (let ((default-directory (f-join (projectile-project-root) "node_modules/@meisterlabs/common/node")))
    (message "%s" default-directory)
    (--> "node -e \"console.log(Object.keys(require('./index.js')).join('\\n'))\""
         shell-command-to-string
         (s-split "\n" it)
         ;; Remove trailing newline
         (-drop-last 1 it))))

(defun +MM:import/buffer-goto-next-header-or-end-of-header ()
  "Go to the "
  ;; Prevent matching the current line
  (goto-char (point-at-eol))
  (if (search-forward-regexp +MM-header-start-regex nil t)
      (progn
        (goto-char (point-at-bol))
        ;; Go to first non-whitespace line
        (or
            (search-backward-regexp "^[^\\/\s\n]" nil t)
            (search-backward-regexp +MM-header-start-regex nil t))
        (goto-char (point-at-eol)))
    (goto-char (point-max))))

(defun +MM:import/make-header-regexp (header)
  (concat +MM-header-start-regex header +MM-header-end-regex))

(defun +MM:import/buffer-goto-or-create-header (header)
  (goto-char (point-max))
  (let* ((remaining-headers (--> (--split-when (string= header it) +MM-comment-headers)
                                 car
                                 (-concat it (list header))
                                 (reverse it)))
         (found-header (--first (search-backward-regexp (+MM:import/make-header-regexp it) nil t) remaining-headers)))
    (message "%s" found-header)
    (if (and found-header (not (string= found-header "MAIN")))
        (+MM:import/buffer-goto-next-header-or-end-of-header)
      (goto-char (point-min)))
    (if (string= header found-header)
        (insert "\n")
      (progn
        (if found-header
            (insert "\n\n\n"))
        (insert (concat "/** " header " **/"))
        (insert "\n\n\n")))))

(defun +MM:import|insert-local-import (import)
  (let ((replacement-char "$$0")
        (import-file-or-dir (s-replace "/index\.js$" "" import)))
    (insert (template "import { <<replacement-char>> } from './<<import-file-or-dir>>';\n"))
    (search-backward "$$0")
    (delete-forward-char 3)
    (evil-insert-state)))

(defun +MM:import|insert-package-import (import)
  (let ((replacement-char "$$0"))
    (insert (template "import { <<replacement-char>> } from '<<import>>';\n"))
    (search-backward "$$0")
    (delete-forward-char 3)
    (evil-insert-state)))

(defun +MM:import|update-import (import)
  (goto-char (point-at-eol))
  (if (search-backward-regexp "[A-Za-z] }" (point-at-bol) t)
      (progn
        (insert ", ")
        (evil-insert-state))
    (progn
      (previous-line)
      (goto-char (point-at-eol))
      (insert "\n")
      (evil-insert-state))))

(defun +MM:import|import (import is-local?)
  (goto-char (point-min))
  (if (search-forward-regexp (template "from '<<import>>';") nil t)
      (+MM:import|update-import import)
    (progn
      (+MM:import/buffer-goto-or-create-header (if is-local? "LOCALS" "EXTERNAL"))
      (if is-local?
          (+MM:import|insert-local-import import)
        (+MM:import|insert-package-import import)))))

(defun +MM:import|ivy-import ()
  (interactive)
  (let ((local-imports (+MM:import/get-local-imports))
        (package-imports (+MM:import/get-package-imports)))
    (ivy-read "Import: " (-concat local-imports package-imports)
              :action (lambda (x) (+MM:import|import x (-contains? local-imports x))))))
#+END_SRC

**** Old Main

#+BEGIN_SRC elisp :tangle no
(defun +MM:get-remaining-headers-list (header)
  "Returns a reversed list of headers to search through"
  (->> +MM-comment-headers
       (-split-on header)
       (-first-item)))

(defun +MM:import-file/goto-or-add-header (header)
  "Goes to a comment header or if it doesnt exist creates one"
  (goto-char (point-min))
  (if (search-forward header nil t)
      (progn
        (search-forward-regexp "^/\\*\\*" nil t)
        (previous-line 2))
    ;; Create header when none was found
    (progn
      (let* ((headers (+MM:get-remaining-headers-list header))
             (next-nearest-header (--first (search-forward it nil t) headers)))

        (if (< (-elem-index header +MM-comment-headers)
               (-elem-index next-nearest-header +MM-comment-headers))
            (evil-insert-newline-above)
          (evil-insert-newline-below))

        (insert (template  "/** <<header>> **/\n\n\n\n"))
        (previous-line 1)))))

(defun +MM:import-file/goto-or-add-import-header (header)
  "Goes to a comment header or if it doesnt exist creates one"
  (goto-char (point-min))
  (if (search-forward header nil t)
      (progn
        (search-forward-regexp "^/\\*\\*" nil t)
        (previous-line 2))
    (progn
      (cond ((string= header "EXTERNALS")
             (progn
               (insert (template  "/** EXTERNALS **/\n\n\n\n"))
               (previous-line 1)
               (evil-insert-newline-below)
               (previous-line 1)))

            ((and (string= header "LOCALS") (search-forward-regexp "/\\*\\* EXTERNALS" nil t))
             (progn
               (search-forward-regexp "^/\\*\\*" nil t)
               (evil-insert-newline-above)
               (insert (template  "/** LOCALS **/\n\n\n"))
               (evil-insert-newline-below)
               (previous-line 1)))

            (t
             (progn
               (insert (template  "/** LOCALS **/\n\n\n\n"))
               (previous-line 1)
               (evil-insert-newline-below)
               (previous-line 1)))))))


(->> (list (list "{ default as typeOf }" "typeOf"))
     (-map 'cdr))


(defun +MM:import-file/grep-index-file ()
  (let ((file-contents
         (with-temp-buffer
           (insert-file-contents "/Users/flo/Code/Meisterlabs/kits-2.0/packages/common/src/index.js")
           (buffer-string))))
    (->> (s-match-strings-all "{\\(.*\n\\)}" file-contents)
         (-map 'last))))

(defun +MM:import-file/add-import (import)
  (goto-char (point-min))

  (if (search-forward-regexp import nil t)
      ;; Import Exists
      (progn
        (beginning-of-visual-line)
        (cond
         ;; Inline import
         ((search-forward-regexp "{.*}" (point-at-eol) t)
          (progn
            (left-char 2)
            (insert ", ")
            (evil-insert-state)))

         ;; Multiline import
         ((search-forward-regexp "}" (point-at-eol) t)
          (progn
            (evil-insert-newline-above)
            (evil-insert-state)))

         ;; Default import
         (t (noop))))

    (progn
      (let* ((is-local (s-contains? "./" import))
             (comment-header-title (if is-local "LOCALS" "EXTERNALS")))
        (+MM:import-file/goto-or-add-import-header comment-header-title)
        (evil-insert-newline-below)
        (previous-line 1)
        (+js/import-file import)))))

(defun +MM|import-file ()
  (interactive)
  (+js|ivy-import-file '+MM:import-file/add-import))
#+END_SRC

**** Add section line

#+BEGIN_SRC elisp
(defun +MM|last-section-header-expression (header &optional expr)
  "Go to the last expression of a header"
  (interactive)
  (goto-char (point-min))
  (if-let* ((header-line (search-forward-regexp (concat +MM-header-start-regex header)))
            (following-header-line (search-forward-regexp +MM-header-start-regex))
            (lines-between (count-lines header-line following-header-line))
            (has-expression-p (> lines-between 3)))
      (if has-expression-p
          (search-backward-regexp "^[^\\/\s\n]" header-line t))))
#+END_SRC

*** CSS Rules
**** Requirements

#+BEGIN_SRC elisp
(require 'ht)
#+END_SRC

**** Rules

#+BEGIN_SRC elisp
(defvar +MM-Rules-percent)
(defvar +MM-Rules-pixel)
(defvar +MM-Rules-number)
(defvar +MM-Rules-deg)

(defvar +MM-Rules-flex-align
  '("center" "flex-start" "flex-end" "space-between" "space-around" "stretch"))

(defvar +MM-Rules-colors
  '("colors.red"
    "colors.grey900"
    "colors.grey700"
    "colors.grey500"
    "colors.grey300"
    "colors.grey200"
    "colors.grey100"
    "colors.white"
    "colors.blue"
    "colors.sky"
    "colors.navy"
    "colors.turquoise"
    "colors.green"
    "colors.grass"
    "colors.yellow"
    "colors.banana"
    "colors.orange"
    "colors.red"
    "colors.pink"
    "colors.purple"))

(setq +MM-Web-Rules
      (ht ("flexDirection"            '("column" "row" "row-reverse" "column-reverse"))
          ("alignContent"             +MM-Rules-flex-align)
          ("alignItems"               +MM-Rules-flex-align)
          ("justifyContent"           +MM-Rules-flex-align)
          ("alignSelf"                +MM-Rules-flex-align)
          ("flexGrow"                 '+MM-Rules-number)
          ("flexShrink"               '+MM-Rules-number)
          ("flexWrap"                 '+MM-Rules-number)

          ("display"                  '("flex" "block" "inline-flex" "inline-block"))

          ("height"                   '+MM-Rules-number)
          ("maxHeight"                '+MM-Rules-number)
          ("maxSize"                  '+MM-Rules-number)
          ("maxWidth"                 '+MM-Rules-number)
          ("minHeight"                '+MM-Rules-number)
          ("minSize"                  '+MM-Rules-number)
          ("minWidth"                 '+MM-Rules-number)
          ("size"                     '+MM-Rules-number)
          ("width"                    '+MM-Rules-number)

          ("listStyleType"            '+MM-Rules-number)

          ("padding"                  '+MM-Rules-number)
          ("paddingHorizontal"        '+MM-Rules-number)
          ("paddingVertical"          '+MM-Rules-number)
          ("paddingTop"               '+MM-Rules-number)
          ("paddingBottom"            '+MM-Rules-number)
          ("paddingLeft"              '+MM-Rules-number)
          ("paddingRight"             '+MM-Rules-number)

          ("margin"                   '+MM-Rules-number)
          ("marginHorizontal"         '+MM-Rules-number)
          ("marginVertical"           '+MM-Rules-number)
          ("marginTop"                '+MM-Rules-number)
          ("marginBottom"             '+MM-Rules-number)
          ("marginLeft"               '+MM-Rules-number)
          ("marginRight"              '+MM-Rules-number)

          ("position"                 '("absolute" "relative" "fixed"))
          ("absoluteHorizontalCenter" 'noop)
          ("absoluteHorizontalCenter" 'noop)
          ("absoluteCenter"           'noop)
          ("absoluteHorizontalCenter" 'noop)
          ("absoluteVerticalCenter"   'noop)
          ("top"                      '+MM-Rules-number)
          ("left"                     '+MM-Rules-number)
          ("right"                    '+MM-Rules-number)
          ("bottom"                   '+MM-Rules-number)

          ("translateY"               '+MM-Rules-pixel)
          ("translateX"               '+MM-Rules-pixel)
          ("scale"                    '+MM-Rules-number)
          ("scaleX"                   '+MM-Rules-number)
          ("scaleY"                   '+MM-Rules-number)
          ("rotate"                   '+MM-Rules-deg)

          ("color"                    +MM-Rules-colors)
          ("fontWeight"               '("heavy" "bold" "black" "light" "normal" "regular"))
          ("fontFamily"               '+MM-Rules-number)
          ("fontSize"                 '+MM-Rules-number)
          ("fontStyle"                '+MM-Rules-number)
          ("lineHeight"               '+MM-Rules-number)
          ("textDecoration"           '+MM-Rules-number)
          ("textShadow"               '+MM-Rules-number)
          ("textTransform"            '+MM-Rules-number)
          ("truncate"                 'noop)
          ("whiteSpace"               '("normal" "nowrap" "pre" "pre-line" "pre-wrap" "initial" "initial"))
          ("wordBreak"                '("normal" "break-all" "keep-all" "break-word" "initial" "inherit"))
          ("wordWrap"                 '("normal" "break-word" "initial" "unsert"))

          ("boxSizing"                '+MM-Rules-number)

          ("cursor"                   '("pointer"))

          ("backfaceVisibility" "hidden")
          ("backgroundColor"          +MM-Rules-colors)
          ("backgroundImage" "")
          ("backgroundPosition"       '("center"))
          ("backgroundRepeat"         '("repeat" "no-repeat" "repeat-x" "repeat-y"))
          ;; ("backgroundSize"        '+MM-Rules-number))

          ("borderBottomLeftRadius"   '+MM-Rules-number)
          ("borderBottomRightRadius"  '+MM-Rules-number)
          ("borderBottomWidth"        '+MM-Rules-number)
          ("borderColor"              +MM-Rules-colors)
          ("borderHorizontalWidth"    '+MM-Rules-number)
          ("borderLeftWidth"          '+MM-Rules-number)
          ("borderRadius"             '+MM-Rules-number)
          ("borderRightWidth"         '+MM-Rules-number)
          ("borderStyle"              '("solid" "dashed"))
          ("borderTopLeftRadius"      '+MM-Rules-number)
          ("borderTopRightRadius"     '+MM-Rules-number)
          ("borderTopWidth"           '+MM-Rules-number)
          ("borderVerticalWidth"      '+MM-Rules-number)
          ("borderWidth"              '+MM-Rules-number)

          ("boxShadow"                '+MM-Rules-number)

          ("overflow"                 '("hidden"))
          ("overflowX"                '("hidden"))
          ("overflowY"                '("hidden"))

          ("fill"                     +MM-Rules-colors)

          ("opacity"                  '+MM-Rules-number)
          ("visibility"               '("visible" "hidden"))

          ("pointerEvents"                 '("none" "auto"))
          ("userSelect"                    '("none" "auto"))

          ("zIndex"                   '+MM-Rules-number)))
#+END_SRC

**** Add rule

#+BEGIN_SRC elisp
(defun +MM|write-rule (rule &optional prop)
  (let* ((maybe-prop-int (condition-case nil
                             (cl-parse-integer prop)
                           (error nil)))
         (prop (cond (maybe-prop-int maybe-prop-int)
                     ;; No argument
                     ((eq prop nil) nil)
                     ;; Color variable
                     ((-contains? +MM-Rules-colors prop) prop)
                     ;; String
                     (t (template "'<<prop>>'"))))
         (has-trailing-semi (buf-line-has ",$")))

    (if has-trailing-semi
        (while
            (re-search-forward ",$" (point-at-eol) t)
          (let ((data (match-data)))
            (unwind-protect
                (set-match-data data)
              (replace-match "")))))

    (evil-insert-newline-below)
    (indent-according-to-mode)
    (insert (template "    .<<rule>>(<<prop>>)"))
    (if has-trailing-semi (insert ","))))

(defun +MM|write-rule-and-restart (rule &optional prop)
  (+MM|write-rule rule prop)
  (+MM|add-rule))

(defun +MM|add-prop-for-rule (rule-string)
  (let* ((rule-value (ht-get +MM-Web-Rules rule-string))
         (further-input (cond
                          ;; Rules without an attribute
                          ;; .absoluteHorizontalCenter()
                          ((eq rule-value #'noop) nil)
                          ;; Rules with numbers
                          ;; .top(10)
                          ((-contains? (list '+MM-Rules-number '+MM-Rules-pixel '+MM-Rules-percent '+MM-Rules-deg) rule-value)
                           (-map #'number-to-string (number-sequence 0 100 10)))
                          ;; Value given by the rule-string
                          ;; position('absolute')
                          (t rule-value))))
    (if further-input
        (ivy-read "Add prop: " further-input
                  :action (lambda (x)
                            (--> x
                                 (cond ((eq rule-value '+MM-Rules-pixel) (concat x "px"))
                                       ((eq rule-value '+MM-Rules-percent) (concat x "%"))
                                       (t x))
                                 (+MM|write-rule-and-restart rule-string it))))
      (+MM|write-rule-and-restart rule-string))))

(defun +MM|add-rule ()
  (interactive)
  (ivy-read "Add Rule: " (ht-keys +MM-Web-Rules)
            :action '+MM|add-prop-for-rule))
#+END_SRC
*** Jump to action

#+BEGIN_SRC elisp
(defun +MM|goto-action ()
  "Go to an action from the app key."
  (interactive)
  (-if-let* ((action-str (-some--> (thing-at-point 'line t)
                                   (s-match ".*: '\\(.*\\)'.*" it)
                                   (nth 1 it)))
             (action-parts (s-split "\\." action-str))
             (action-parent-str (--> action-parts
                                     (-drop-last 1 it)
                                     (s-join "." it)))
             (src-dir (f-join (projectile-project-root) "src"))
             (app-file-contents (-some--> src-dir
                                  (f-join it "apps/Main/App.js")
                                  (f-read it))))
      (-->
       (cond
        ;; Canvas Actions
        ((s-equals? "Canvas" (-first-item action-parts))
         (--> (-remove-item "Canvas" action-parts)
              (s-join "/" it)
              (s-append ".js")
              (f-join src-dir "containers/MapEditor/actions" it)))

        ;; Server Actions
        ((s-equals? "Server" (-first-item action-parts))
         (-some--> (-last-item action-parts)
                   (f-join src-dir "containers/Server/Default" it "onSuccess.js")))

        ;; All other Actions
        (t (-some-->
            (if (> (length action-parts) 1)
                (-drop-last 1 action-parts)
              action-parts)
            (s-join "." it)
            (s-match (template "<<it>>.*require('\\(.*\\)')") app-file-contents)
            (nth 1 it)
            (s-replace "/controller" "" it)
            (if (> (length action-parts) 1)
                (f-join src-dir it "actions" (template "<<(-last-item action-parts)>>.js"))
              (f-join src-dir "actions" "MapListing" (template "<<(-last-item action-parts)>>.js"))))))


       (if (f-exists? it)
           (find-file it)
         (message "No such file: %s" it)))

    (message "No action found!")))
#+END_SRC


** Bindings

#+BEGIN_SRC elisp
(defun +MM/setup-keybindings ()
  "Setup Keybindings"

  (map! :map +MM-Web-mode-map
        :localleader
        :desc  "Repl"                 "R"  #'+MM|nodejs-repl

        (:prefix ("f" . "file")
          :desc  "Jump to Entity"               "e"  (Î»! (+ivy/counsel-project-file-jump "src/containers/MapEditor/Entities"))
          :desc  "Search Canvas Files"          "f"  #'+MM|canvas-files
          :desc  "Convert into new Redux Style" "X"  #'+MM|turn-style-object-into-function))

  (map! :map js2-mode-map
        :n "[1" #'+MM|alternate-file
        :n "]1" #'+MM|alternate-file

        :localleader
        :desc  "Import File"          "i"  #'+MM|import-file
        :desc  "Generate Index"       "I"  (Î»! (+js|generate-index nil '("helpers")))
        :desc  "Update props header"  "u"  #'+MM|update-schema-props

        (:prefix ("c" . "Create")
          :desc  "Rule"                         "r"  #'+MM|add-rule
          :desc  "Container Action"             "a"  #'+MM|create-action
          :desc  "Canvas Action"                "A"  #'+MM|canvas-create-action
          :desc  "Container"                    "c"  #'+MM|canvas-create-action)

        (:prefix ("d" . "Debug")
          :desc  "Tap Log"                      "t"  #'+MM|chain-tap-log
          :desc  "Tap Log State"                "T"  #'+MM|chain-tap-log-state
          :desc  "Debugger"                     "d"  #'+js|insert-debugger)

        (:prefix ("r" . "Refactor")
          :desc  "Style function into object"   "rs" #'+MM|turn-style-object-into-function
          :desc  "Extract Props"                "x"  #'+js|extract-props
          :desc  "Convert into new Redux Style" "X"  #'+MM|turn-style-object-into-function)))
#+END_SRC

** Minor Mode

Custom minor mode for work,
When the variable ~+MM-Web-mode~ is enabled,
this mode is enabled.

#+BEGIN_SRC elisp
(def-project-mode! +MM-Web-mode
  :add-hooks (+MM/setup-keybindings)
  :on-enter (setq sgml-basic-offset 4)
  :on-load)
#+END_SRC

#+BEGIN_SRC elisp
(after! yasnippet
  :config
  (setq yas-snippet-dirs (append yas-snippet-dirs '("~/Code/Meisterlabs/Snippets"))))
#+END_SRC
