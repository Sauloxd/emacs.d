#+TITLE: Org Utils
#+AUTHOR: Florian SchrÃ¶dl (floscr)
#+PROPERTY: header-args :emacs-lisp :tangle yes :comments link
#+STARTUP: org-startup-folded: showall
#+BEGIN_SRC emacs-lisp
;; -*- lexical-binding: t -*-
#+END_SRC

* Utils
** Parsing Functions
*** Match at point
:PROPERTIES:
:SOURCE:   [[https://stackoverflow.com/questions/10074016/org-mode-filter-on-tag-in-agenda-view/33444799#33444799][emacs - Org-mode: Filter on tag in agenda view? - Stack Overflow]]
:END:

Weather the entry at point matches either =TAG= or =TODO=.

#+BEGIN_SRC elisp
(defun +org/match-at-point-p (match)
  "Return non-nil if headline at point matches MATCH.
Here MATCH is a match string of the same format used by
`org-tags-view'."
  (funcall (cdr (org-make-tags-matcher match))
           (org-get-todo-state)
           (org-get-tags-at)
           (org-reduced-level (org-current-level))))
#+END_SRC

** Agenda
*** Skip agenda entry without match

Skip entries without =TODO= or =TAG=.

Can be used like this

#+BEGIN_SRC elisp :tangle no
(let ((org-agenda-skip-function '(+org/agenda-skip-without-match "-WORK")))
    (org-agenda "a"))
#+END_SRC

#+BEGIN_SRC elisp
(defun +org/agenda-skip-without-match (match)
  "Skip current headline unless it matches MATCH.

Return nil if headline containing point matches MATCH (which
should be a match string of the same format used by
`org-tags-view').  If headline does not match, return the
position of the next headline in current buffer.

Intended for use with `org-agenda-skip-function', where this will
skip exactly those headlines that do not match."
  (save-excursion
    (unless (org-at-heading-p) (org-back-to-heading))
    (let ((next-headline (save-excursion
                           (or (outline-next-heading) (point-max)))))
      (if (+org/match-at-point-p match) nil next-headline))))
#+END_SRC

** Org Links
*** Is looking at link

#+BEGIN_SRC elisp
;;;###autoload
(defun +org/link-at-point ()
  "Is the point under a link."
  (assoc :link (org-context)))
#+END_SRC

*** Copy Link under Cursor

#+BEGIN_SRC elisp
;;;###autoload
(defun +org/link-from-point ()
  (interactive)
  (-some--> (+org/link-at-point)
            (buffer-substring-no-properties (or (cadr it) (point-min))
                                            (or (caddr it) (point-max)))
            (--tap (add-text-properties 0 (length it) '(yank-handler (my-yank-org-link)) it) it)))

;;;###autoload
(defun +org|link-url-from-point ()
  (interactive)
  (-some->> (+org/link-from-point)
    (+org/parse-link)
    (nth 1)))

;;;###autoload
(defun +org|link-title-from-point ()
  (interactive)
  (-some->> (+org/link-from-point)
    (+org/parse-link)
    (nth 2)))
#+END_SRC

** Parse Link

#+BEGIN_SRC elisp
;;;###autoload
(defun +org/parse-link (link)
  "Parse org LINK to pair of url and title."
  (s-match org-bracket-link-regexp link))

;;;###autoload
(defun +org/link-title-or-original (str)
  "Either return the title of a link or the original STR."
  (or (nth 2 (+org/parse-link str))
      str))

;;;###autoload
(defun +org/link-url-or-original (str)
  "Either return the title of a link or the original STR."
  (or (nth 1 (+org/parse-link str))
      str))
#+END_SRC

** Expand org file name

#+BEGIN_SRC elisp
;;;###autoload
(defun +org/expand-org-file-name (x)
  "Expand file name X with org-directory."
  (expand-file-name x org-directory))

;;;###autoload
(defun +org/expand-org-file-names (xs)
  "Expand file names XS with org-directory."
  (-map #'+org/expand-org-file-name xs))
#+END_SRC

** Set agenda command or replace on reload

When configuring agenda commands I often eval them for testing.
This helper replaces items with the same key, so you don't end up with a bunch of duplicates in ~agenda-custom-commands~.

#+BEGIN_SRC elisp
;;;###autoload
(defun +org/add-to-agenda-custom-commands (x)
  "Add or replace X in the org-agenda-custom-commands list."
  (if-let ((key (car x))
           (index (--find-index (string= key (car it)) org-agenda-custom-commands)))
      (->> (-replace-at index x org-agenda-custom-commands)
           (setq org-agenda-custom-commands))
    (add-to-list 'org-agenda-custom-commands x)))
#+END_SRC

** Open frame command

My command to call the capture with following attributes.
I disable posframe, since it doesn't go beyond the X Window.

#+BEGIN_SRC elisp
;;;###autoload
(defun +org-capture|my-open-frame ()
  "Open capture, adjust display, disable posframe."
  (interactive)
  (+ui|adjust-ui-to-display)
  (+org-capture/open-frame)
  (ivy-posframe-mode -1))
#+END_SRC
