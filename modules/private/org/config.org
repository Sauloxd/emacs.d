#+TITLE: Org Mode Configuration
#+AUTHOR: Florian Schrödl (floscr)
#+PROPERTY: header-args :tangle yes
#+STARTUP: org-startup-folded: showall
#+BEGIN_SRC emacs-lisp
;; -*- lexical-binding: t -*-
#+END_SRC

* Configuration
** Config
*** General Config
**** Default Org Directory

Doom resets the default ~org-directory~, so this is a workaround.

#+BEGIN_SRC elisp
(setq org-directory "~/Documents/Org")
(after! org (setq org-directory "~/Documents/Org"))
#+END_SRC

**** Fix Date Compatibility before 1970

Org mode does not work for dates before 1970 for old emacs versions.
I do not care about backwards compatibility and have dates for books date predate this.

#+BEGIN_SRC elisp
(after! org
  (setq org-read-date-force-compatible-dates nil))
#+END_SRC

**** Org variables

#+BEGIN_SRC elisp
(setq org-shopping-list-file (f-join org-directory "Main/shoppinglist.org"))

(after! org
  :config
  (setq org-src-window-setup 'current-window)
  (setq org-tags-column -110)
  (setq org-image-actual-width 600)
  (setq org-default-notes-file (concat org-directory "/Main/inbox.org")))
#+END_SRC
**** Org Tags

#+BEGIN_SRC elisp
(after! org
  (setq org-tag-alist '(("WORK")
                        ("HOME")
                        ("PERSONAL")
                        ("LOW_EFFORT")
                        ("MEDIUM_EFFORT")
                        ("PROJECT")
                        ("EMACS")
                        ("NIXOS")
                        ("TO_BUY"))))
#+END_SRC

**** Org Mode Load Hook

Customize org mode to:
- Always keep the buffer centered via ~viusal-fill-column-mode~.
  This has to be installed extra, doom doesn't ship with it anymore.
- Always reload buffers when the file changes via ~auto-revert-mode~
  Automatically update on Syncthing changes.
- Disable automatic line wrapping from ~auto-fill-mode~
  Automatic line wrapping is great when you're working on one display,
  but when you edit the same text on mobile it will break awkwardly.
- Visually Wrap text with ~visual-line-mode~
  Since text is not hard wrapped, I wrap it via Emacs visually.

#+BEGIN_SRC elisp
(setq visual-fill-column-center-text t
      visual-fill-column-width fill-column)

(defun +org*setup-org-mode-hook ()
  "Setup org mode buffers."
  (auto-fill-mode -1)
  (display-line-numbers-mode -1)
  (line-number-mode -1)
  (hl-line-mode -1)
  (auto-revert-mode 1)
  (setq-local visual-fill-column-center-text t)
  (setq-local visual-fill-column-width 120)
  (visual-fill-column-mode)
  (visual-line-mode)
  (visual-fill-column-adjust))

(after! org
  (add-hook! org-mode #'+org*setup-org-mode-hook))
#+END_SRC

**** Todo State Keywords

All todo keywords are for general items.

~[ ]~ style keywords are for subtasks, that I might want to filter out from certain views.
#+BEGIN_EXAMPLE
- [!] Stands for active
- [?] Stands for waiting
- [|] Stands for cancelled
#+END_EXAMPLE

#+BEGIN_SRC elisp
(after! org
  :config
  (setq org-todo-keywords
        '((sequence "ACTIVE(a)" "NEXT(n)" "|" "DONE")
          (sequence "TODO(t)" "|" "DONE(x)")
          (sequence "WAITING(w)"  "SOMEDAY(s)" "|" "DONE" "CANCELLED(c)")
          (sequence "[ ]([)" "[!](!)" "[-](-)" "|" "[X](])" "[|](|)")
          (sequence "PROJECT(p)" "|" "DONE")
          (sequence "NOTE(N)")))
  (setq org-todo-keyword-faces
        '(("ACTIVE" :inherit warning :weight bold)
          ("NEXT" :inherit warning :weight bold)
          ("NOTE" :inherit warning :weight bold)
          ("WAITING" :inherit default :weight bold)
          ("SOMEDAY" :inherit default :weight bold)
          ("PROJECT" :inherit 'org-todo :weight bold))))
#+END_SRC

**** Attachments

#+BEGIN_SRC elisp
(after! org
  :config
  (add-to-list 'org-link-abbrev-alist (cons "attach" (abbreviate-file-name org-attach-directory))))
#+END_SRC

**** Projectile Ignore

#+BEGIN_SRC elisp
(after! projectile
  (add-to-list 'projectile-globally-ignored-file-suffixes ".org_archive")
  (add-to-list 'projectile-globally-ignored-file-suffixes ".DS_Store"))
#+END_SRC

**** Latex

Needs ~dvisvgm~

#+BEGIN_SRC elisp
(setq org-latex-create-formula-image-program 'dvisvgm)
#+END_SRC

*** Refile Targets

#+BEGIN_SRC elisp
(setq +org:level-1-refile-targets
      (+org/expand-org-file-names
       '("Main/reading-list.org"
         "Main/cooking.org"
         "Main/books.org"
         "Main/programming.org"
         "Main/shoppinglist.org")))

(setq +org:max-level-2-refile-targets
      (+org/expand-org-file-names
       '("Main/emacs.org"
         "Main/art.org"
         "Main/diary"
         "Main/games.org"
         "Main/hardware.org"
         "Main/gtd.org"
         "Main/inbox.org"
         "Main/mealplan.org"
         "Main/misc.org"
         "Main/movies.org"
         "Main/music.org"
         "Main/osx.org"
         "Main/personal.org"
         "Main/podcasts.org"
         "Main/sleep.org"
         "Main/sports.org"
         "Main/travel.org"
         "Work/work.org")))

(setq max-level-3-refile-targets
      (+org/expand-org-file-names
       '("Main/projects.org")))

(defun +org:level-1-refile-targets () +org:level-1-refile-targets)

(defun +org:max-level-2-refile-targets () +org:max-level-2-refile-targets)

(defun max-level-3-refile-targets () max-level-3-refile-targets)

(after! org
  :config
  (setq org-refile-targets (quote ((nil :maxlevel . 5)
                                   (+org:max-level-2-refile-targets :maxlevel . 2)
                                   (max-level-3-refile-targets :maxlevel . 3)
                                   (+org:level-1-refile-targets :level . 1))))
  (setq org-agenda-refile org-agenda-files))
#+END_SRC

*** Journal

#+BEGIN_SRC elisp :tangle no
(defvar org-journal-dir-default "~/Dropbox/org/journal")
(defvar org-journal-dir-diary "~/Dropbox/org/diary")

(setq org-journal-dir org-journal-dir-default)
(setq org-journal-file-format "%Y-%m-%d")
(setq org-journal-date-prefix "#+TITLE: ")
(setq org-journal-date-format "%A, %B %d %Y")
(setq org-journal-time-prefix "* ")
(setq org-journal-time-format "")
#+END_SRC

*** Org Capture
**** Org Capture Config

#+BEGIN_SRC elisp
(setq +org-capture-frame-parameters
  `((name . "doom-capture")
    (width . 150)
    (height . 45)
    (transient . t)))
#+END_SRC

**** Org Capture Templates

Configured with [[https://github.com/progfolio/doct][doct]].

#+BEGIN_SRC elisp
(use-package! doct
  :after org
  :init (setq org-capture-templates '())
  :config
  (setq org-capture-templates
        (doct `(("Inbox"
                 :keys ""
                 :todo "TODO"
                 :title "%?"
                 :file org-default-notes-file
                 :template ("* %{todo} %{title}"
                            ":PROPERTIES:"
                            ":CREATED: %U"
                            ":END:")
                 :children
                 (("Task"
                   :keys "t")
                  ("Chrome Window"
                    :keys "c"
                    :title "%(+wm/last-chrome-window-org-link)")
                  ("Shopping"
                   :keys "s"
                   :headline "Supermarket"
                   :file org-shopping-list-file)
                  ("Work:"
                    :keys "w"
                    :file ,(f-join org-directory "Work/work.org")
                    :headline "GTD"
                    :children
                    (("Task"
                      :keys "t")
                     ("Task (Chrome)"
                      :keys "c"
                      :title "%(+wm/last-chrome-window-org-link-formatted)")
                     ("Review (Chrome)"
                      :keys "r"
                      :title "%(+wm/last-chrome-window-org-link-formatted) :REVIEW:\nSCHEDULED: %(org-insert-time-stamp (current-time))")))))
                ("Pinboard"
                 :keys "p"
                 :file org-pinboard-file
                 :headline "Pinboard"
                 :template ("* %(nth 0 (+wm/last-chrome-window-url-title))"
                            ":PROPERTIES:"
                            ":URL: %(nth 1 (+wm/last-chrome-window-url-title))"
                            ":CREATED: %U"
                            ":END:"))))))
#+END_SRC
**** Command

My command to call the capture with following attributes.
I disable posframe, since it doesn't go beyond the X Window.

#+BEGIN_SRC elisp
(defun +org-capture|my-open-frame ()
  "Open capture, adjust display, disable posframe."
  (interactive)
  (+ui|adjust-ui-to-display)
  (+org-capture/open-frame)
  (ivy-posframe-mode -1))
#+END_SRC

*** Src Block Snippets

#+BEGIN_SRC elisp :tangle no
(add-to-list 'org-structure-template-alist '("es" "#+BEGIN_SRC elisp\n?\n#+END_SRC\n"))
(add-to-list 'org-structure-template-alist '("E"  "#+BEGIN_EXAMPLE\n?\n#+END_EXAMPLE"))
(add-to-list 'org-structure-template-alist '("j"  "#+BEGIN_SRC js\n?\n#+END_SRC\n"))
(add-to-list 'org-structure-template-alist '("ps" "#+BEGIN_SRC purescript\n?\n#+END_SRC\n"))
(add-to-list 'org-structure-template-alist '("b"  "#+BEGIN_SRC bash\n?\n#+END_SRC\n"))
(add-to-list 'org-structure-template-alist '("re" "#+BEGIN_SRC reason\n?\n#+END_SRC\n"))
(add-to-list 'org-structure-template-alist '("oc" "#+BEGIN_SRC ocaml\n?\n#+END_SRC\n"))
(add-to-list 'org-structure-template-alist '("rb" "#+BEGIN_SRC ruby\n?\n#+END_SRC\n"))
(add-to-list 'org-structure-template-alist '("md" "#+BEGIN_SRC markdown\n?\n#+END_SRC\n"))
#+END_SRC

*** Agenda
**** Config
***** Agenda Files

#+BEGIN_SRC elisp
(after! org-agenda
  :config
  (setq org-agenda-block-separator ?—)
  (setq org-agenda-files
        (--map (f-join org-directory it)
               '("Main/gtd.org"
                 "Main/inbox.org"
                 "Main/calendar-family.org"
                 "Work/work.org"))))
#+END_SRC

***** Custom Date Property

#+BEGIN_SRC elisp
(after! org-agenda
  (setq-default
   org-agenda-cmp-user-defined #'+org|compare-created-date-property
   org-agenda-sorting-strategy '((agenda habit-down user-defined-up time-up priority-down category-keep)
                                 (todo priority-down category-keep user-defined-up time-up)
                                 (tags priority-down category-keep user-defined-up time-up)
                                 (search category-keep))))
#+END_SRC

***** Always save files after agenda commands

I always forget to save after agenda commands since it feels like an UI.
So I've added ~advices~ to save all buffers after executing them.

This is taken from [[https://emacs.stackexchange.com/questions/21754/how-to-automatically-save-all-org-files-after-marking-a-repeating-item-as-done-i][StackOverflow: How to automatically save all org files after marking a repeating item as DONE in the org agenda?]]

The macro is take from [[file:~/.config/doom/autoload.org::*Ignore Arguments][Ignore Arguments]].

#+BEGIN_SRC elisp
(after! org
  :init
  (advice-add 'org-deadline         :after (η #'org-save-all-org-buffers))
  (advice-add 'org-schedule         :after (η #'org-save-all-org-buffers))
  (advice-add 'org-todo             :after (η #'org-save-all-org-buffers))
  (advice-add 'org-agenda-clock     :after (η #'org-save-all-org-buffers))
  (advice-add '+org|counsel-org-tag :after (η #'org-save-all-org-buffers))
  (advice-add 'org-agenda-kill      :after (η #'org-save-all-org-buffers))
  (advice-add 'org-agenda-archive   :after (η #'org-save-all-org-buffers)))
#+END_SRC

**** Bindings

Enable avy/evil-motion for agenda

#+BEGIN_SRC elisp
(map! :after evil-org-agenda
      :map org-agenda-mode-map
      :m "gs" nil)
#+END_SRC

***** Motions

#+BEGIN_SRC elisp
(evil-define-key 'motion org-agenda-mode-map
  "vd" 'org-agenda-day-view
  "ds" 'org-agenda-schedule
  "vw" 'org-agenda-week-view
  "vm" 'org-agenda-month-view
  "vy" 'org-agenda-year-view)
#+END_SRC

**** Custom Agenda Commands

Helper to reset the org agenda custom commands.

#+BEGIN_SRC elisp :tangle no
(setq org-agenda-custom-commands '())
#+END_SRC

***** Helpers
****** Set agenda command or replace on reload

When configuring agenda commands I often eval them for testing.
This helper replaces items with the same key, so you don't end up with a bunch of duplicates in ~agenda-custom-commands~.

#+BEGIN_SRC elisp
(defun +org/add-to-agenda-custom-commands (x)
  "Add or replace X in the org-agenda-custom-commands list."
  (if-let ((key (car x))
           (index (--find-index (string= key (car it)) org-agenda-custom-commands)))
      (->> (-replace-at index x org-agenda-custom-commands)
           (setq org-agenda-custom-commands))
    (add-to-list 'org-agenda-custom-commands x)))
#+END_SRC

****** Get Parent Project

#+BEGIN_SRC elisp
(defun +org/get-parent-project ()
  "Search upwards for either parent tree for item with either PROJECT or ACTIVE todo state."
  (while (and (org-up-heading-safe) (not (--find (string= (org-get-todo-state) it) '("PROJECT" "ACTIVE")))))
  (--find (string= (org-get-todo-state) it) '("PROJECT" "ACTIVE")))
#+END_SRC

****** Super Agenda ~TODO~ autogroup

Adds super agenda auto group for headings defined in [[*Get Parent Project][Get Parent Project]] function.
This way I can create super agenda groups for items with ~PROJECT~ heading, that have their own subtasks.

#+BEGIN_SRC elisp
(after! org-super-agenda
  :init
  (org-super-agenda--def-auto-group parent-todo "their parent todo heading"
    :key-form (org-super-agenda--when-with-marker-buffer (org-super-agenda--get-marker item)
                (when (and (org-up-heading-safe) (+org/get-parent-project))
                  (org-get-heading 'notags 'notodo)))))
#+END_SRC

***** Opening Tag

#+BEGIN_SRC elisp
(after! org-agenda
#+END_SRC

***** Today View

#+BEGIN_SRC elisp
(+org/add-to-agenda-custom-commands
 '("d" "Day View" ((agenda "a"
                           ((org-agenda-prefix-format "  %?-12t% s")
                            (org-agenda-start-on-weekday nil)
                            (org-agenda-span 1)
                            (org-agenda-start-day ".")
                            (org-agenda-skip-scheduled-if-done t)
                            (org-agenda-sorting-strategy '(timestamp-up time-up))
                            (org-super-agenda-header-separator "")
                            (org-agenda-day-view)
                            (org-super-agenda-groups '((:name none :date today :time-grid t)
                                                       (:name "\nOverdue" :deadline past :scheduled past)
                                                       (:name "Future" :anything (:scheduled future)))))))))
#+END_SRC

***** Personal Project Agenda

#+BEGIN_SRC elisp
(+org/add-to-agenda-custom-commands
 '("P" "Personal Project Agenda"
   ((alltodo ""
             ((org-agenda-sorting-strategy '(priority-down todo-state-down user-defined-down timestamp-down time-down))
              (org-super-agenda-groups '((:name "Projects" :auto-parent-todo)
                                         (:discard (:anything t)))))))
   ((org-agenda-files (--> '("Main/projects.org" "Main/gtd.org")
                            (--map (f-join org-directory it) it))))))
#+END_SRC

***** Week View

#+BEGIN_SRC elisp
(+org/add-to-agenda-custom-commands
 '("D" "Day View" ((agenda "a"
                           ((org-agenda-prefix-format "  %?-12t% s")
                            (org-agenda-start-on-weekday nil)
                            (org-agenda-span 5)
                            (org-agenda-start-day ".")
                            (org-agenda-skip-scheduled-if-done t)
                            (org-agenda-sorting-strategy '(timestamp-up time-up))
                            (org-super-agenda-header-separator "")
                            (org-agenda-day-view)
                            (org-super-agenda-groups '((:name none :date today :time-grid t)
                                                       (:name "\nOverdue" :deadline past :scheduled past)
                                                       (:name "Future" :anything (:scheduled future)))))))))
#+END_SRC

***** All TODO Items

#+BEGIN_SRC elisp
(+org/add-to-agenda-custom-commands
 '("x" "Todo Items"
   ((agenda
     "a"
     ((org-agenda-span 3)
      (org-agenda-use-time-grid 'require-timed)
      (org-agenda-start-day ".")
      (org-agenda-show-all-dates nil)
      (org-agenda-prefix-format '((agenda . "%11s%?-t")))
      (org-super-agenda-header-separator "")
      (org-agenda-sorting-strategy '(priority-down scheduled-down ts-down todo-state-down))
      (org-super-agenda-groups '((:name none :date today :time-grid t)
                                 (:name "\nOverdue" :deadline past :scheduled past)
                                 (:name "Future" :anything (:scheduled future))))))
    (tags-todo
     "-WORK-BACKLOG"
     ((org-agenda-prefix-format "  %?-12t% s")
      (org-agenda-sorting-strategy '(user-defined-down timestamp-down todo-state-down))
      (org-super-agenda-groups '((:name "Next" :todo ("ACTIVE"))
                                 (:name nil :discard (:scheduled t :deadline t))
                                 (:name "Inbox Links" :regexp "TODO \\(\\[\\[\\\|https?:\\)" :order 2)
                                 (:name "Inbox" :file-path ".*inbox.org$" :order 2)
                                 (:name "Unscheduled" :and (:todo "TODO" :scheduled nil :not (:tag "BACKLOG")) :order 1)
                                 (:name "Backlog" :tag "BACKLOG" :order 3)
                                 (:name "Overdue" :scheduled past))))))))
#+END_SRC

***** Books

#+BEGIN_SRC elisp
(+org/add-to-agenda-custom-commands
 '("l" "Literature (Books)"
   ((alltodo ""
     ((org-agenda-files (--map (f-join org-directory it) '("Main/books.org")))
      (org-super-agenda-groups '((:name "Fiction" :tag ("FICTION"))
                                 (:name "Non-Fiction" :tag ("NON_FICTION"))
                                 (:name "Self Help" :tag ("SELF_HELP"))
                                 (:name "Comics" :tag ("COMIC")))))))))
#+END_SRC

***** Backlog

#+BEGIN_SRC elisp
(+org/add-to-agenda-custom-commands
 '("b" "Backlog Items"
   ((tags-todo
     "+BACKLOG-WORK"
     ((org-agenda-prefix-format "  %?-12t% s")
      (org-agenda-todo-ignore-scheduled t)
      (org-agenda-sorting-strategy '(todo-state-up user-defined-down timestamp-down))
      (org-super-agenda-groups '((:discard (:scheduled t))
                                 (:name "Emacs" :tag ("EMACS"))
                                 (:name "Nixos" :tag ("NIXOS"))
                                 (:name "Digital" :tag ("DIGITAL"))
                                 (:name "Personal" :tag ("PERSONAL") :order -2)
                                 (:name "Home" :tag ("HOME") :order -1)
                                 (:name "To Buy" :tag ("TO_BUY"))
                                 (:name "Untagged" :order -3 :anything))))))
   ((org-agenda-hide-tags-regexp "BACKLOG")
    (org-agenda-files (--map (f-join org-directory it) '("Main/gtd.org"))))))
#+END_SRC

***** Cooking Backlog

#+BEGIN_SRC elisp
(+org/add-to-agenda-custom-commands
 '("C" "Cooking Backlog"
   ((tags-todo "+BACKLOG"
     ((org-agenda-prefix-format "  %?-12t% s")
      (org-agenda-todo-ignore-scheduled t)
      (org-agenda-sorting-strategy '(todo-state-up user-defined-down timestamp-up))
      (org-agenda-files (list (f-join org-directory "Main/cooking.org"))))))))
#+END_SRC

***** Emacs

#+BEGIN_SRC elisp
(+org/add-to-agenda-custom-commands
 '("e" "Emacs Items" alltodo ""
   ((org-agenda-prefix-format "  %?-12t% s")
    (org-agenda-sorting-strategy '(user-defined-down timestamp-down todo-state-down))
    (org-agenda-files (list (f-join org-directory "Main/Emacs.org")))
    (org-super-agenda-groups '((:name "Active" :todo "ACTIVE")
                               (:auto-priority t)
                               (:name "Next" :todo "NEXT")
                               (:name "Backlog" :todo "TODO"))))))
#+END_SRC

***** Work
****** Todo Agenda

#+BEGIN_SRC elisp
(+org/add-to-agenda-custom-commands
 '("w" "Work Agenda"
   ((agenda "a" ((org-agenda-sorting-strategy '(time-up todo-state-up scheduled-up user-defined-up))
                 (org-agenda-span 3)
                 (org-agenda-start-on-weekday t)
                 (org-agenda-use-time-grid 'require-timed)
                 (org-agenda-start-day "-1d")))
    (alltodo ""
             ((org-agenda-sorting-strategy '(time-up todo-state-up user-defined-down))
              (org-super-agenda-groups '((:discard (:todo ("[ ]" "[|]")))
                                         (:name "Inbox" :category "Inbox" :order 5)
                                         (:name "Meetings" :tag "MEETING" :order 2)
                                         (:name "Reviews" :tag "REVIEW" :order 4)
                                         (:name "Waiting" :todo ("WAITING" "[-]") :order 4)
                                         (:name "Backlog" :tag "BACKLOG" :order 11)
                                         (:name "GTD" :tag "GTD")
                                         (:name "Reading List" :tag "TEXT" :order 10))))))
   ((org-agenda-hide-tags-regexp "WORK\\|BACKLOG")
    (org-agenda-tag-filter-preset '("+WORK"))
    (org-agenda-files (--map (f-join org-directory it) '("Work/work.org" "Main/inbox.org"))))))
#+END_SRC

****** Project Agenda

#+BEGIN_SRC elisp
(+org/add-to-agenda-custom-commands
 '("p" "Work Project Agenda"
   ((alltodo "+WORK-EVENT"
             ((org-agenda-sorting-strategy '(todo-state-down user-defined-down timestamp-down time-down))
              (org-agenda-tag-filter-preset '("-EVENT"))
              (org-super-agenda-groups '((:name "Projects" :auto-parent-todo)
                                         (:discard (:anything t)))))))
   ((org-agenda-hide-tags-regexp "WORK\\|BACKLOG")
    (org-agenda-files (list (f-join org-directory "Work/work.org"))))))
#+END_SRC

***** Calendar

#+BEGIN_SRC elisp
(+org/add-to-agenda-custom-commands
 '("c" "Calendar" agenda ""
   ((org-agenda-span 7)
    (org-agenda-start-on-weekday nil)
    (org-agenda-start-day "-1d")
    (org-agenda-tag-filter-preset '("+CALENDAR")))))
#+END_SRC

***** Closing Tag

#+BEGIN_SRC elisp
)
#+END_SRC

**** Hacks
***** Fix agenda view

For some reason my tag filters don't get applied for the agenda.
Calling an update after the finalize fixes it

#+BEGIN_SRC elisp
(add-hook 'org-agenda-finalize-hook (lambda () (org-agenda-filter-apply org-agenda-tag-filter 'tag)))
#+END_SRC

*** Clocking
**** Automatically set clocking or todo state
:PROPERTIES:
:SOURCE:   [[https://github.com/magnars/dash.el#-contains-list-element][magnars/dash.el: A modern list library for Emacs]]
:END:

#+BEGIN_SRC elisp
(after! org
#+END_SRC

Clock in when the todo state has been changed to ~ACTIVE~

#+BEGIN_SRC elisp
(defun +org/org-clock-in-if-starting ()
  "Clock in when the task is marked ACTIVE."
  (when (and (string= org-state "ACTIVE")
             (not (string= org-last-state org-state)))
    (org-clock-in)))

(add-hook 'org-after-todo-state-change-hook '+org/org-clock-in-if-starting)
#+END_SRC

Clock out when the todo state is set to a delay state.

#+BEGIN_SRC elisp
(defun +org/org-clock-out-if-waiting ()
  "Clock out when the task is marked WAITING."
  (when (and (-contains? '("WAITING" "SOMEDAY" "CANCELLED") org-state)
             (equal (marker-buffer org-clock-marker) (current-buffer))
             (< (point) org-clock-marker)
             (> (save-excursion (outline-next-heading) (point))
               org-clock-marker)
             (not (string= org-last-state org-state)))
    (org-clock-out)))

(add-hook 'org-after-todo-state-change-hook '+org/org-clock-out-if-waiting)
#+END_SRC

Set the active state when clocking in.

#+BEGIN_SRC elisp
(defun +org/org-set-active-state (&optional args args)
  "Set the active state for the current item."
  (cond ((buf-line-has "PROJECT") nil)
        ((buf-line-has "\\[.\\]") (org-todo "[!]"))
        (t (org-todo "ACTIVE"))))

(advice-add #'org-clock-in :after #'+org/org-set-active-state)
#+END_SRC

#+BEGIN_SRC elisp
)
#+END_SRC

*** Tables
**** Copy Table Field

#+BEGIN_SRC elisp
(defun +org|table-copy-field ()
  "Copy a table field under the cursor."
  (interactive)
  (save-excursion
    (kill-new (s-trim (org-table-get-field)))))
#+END_SRC
** Modules

#+BEGIN_SRC elisp
(if (featurep! +org-noter)        (load! "+org-noter"))
(if (featurep! +org-reading-list) (load! "+org-reading-list"))
(if (featurep! +org-web-tools)    (load! "+org-web-tools"))
(if (featurep! +org-tags)         (load! "+org-tags"))
(if (featurep! +org-pinboard)     (load! "+org-pinboard"))
#+END_SRC

** Features

Stuff that doesn't belong into modules, but is too big to put into a simple util section.

*** Counsel Tagging Enhancement

Custom counsel tagging for org buffers and agenda buffers.

Functions taken from:
- [[file:~/.emacs.d/.local/straight/repos/swiper/counsel.el::defun counsel-org-tag-agenda (][swiper/counsel.el:counsel-org-tag-agenda]]
- [[file:~/.emacs.d/.local/straight/repos/swiper/counsel.el::defun counsel-org-tag (][swiper/counsel.el:counsel-org-tag]]

What I've changed:
- Always display ~org-tag-persistent-alist~ tags
- Always display all buffer tags

#+BEGIN_SRC elisp
(defun +org|counsel-org-tag (&optional from-agenda)
  "Add or remove tags in `org-mode'."
  (interactive)
  (save-excursion
    (if (eq major-mode 'org-agenda-mode)
        (if org-agenda-bulk-marked-entries
            (setq counsel-org-tags nil)
          (let ((hdmarker (or (org-get-at-bol 'org-hd-marker)
                              (org-agenda-error))))
            (with-current-buffer (marker-buffer hdmarker)
              (goto-char hdmarker)
              (setq counsel-org-tags (counsel--org-get-tags)))))
      (unless (org-at-heading-p)
        (org-back-to-heading t))
      (setq counsel-org-tags (counsel--org-get-tags)))
    (let ((org-last-tags-completion-table
           (append (and (or org-complete-tags-always-offer-all-agenda-tags
                            (eq major-mode 'org-agenda-mode))
                        (org-global-tags-completion-table
                         (org-agenda-files)))
                   org-tag-persistent-alist
                   org-tag-alist
                   (org-get-buffer-tags))))
      (ivy-read (counsel-org-tag-prompt)
                (lambda (str _pred _action)
                  (delete-dups
                   (all-completions str #'org-tags-completion-function)))
                :history 'org-tags-history
                :action #'counsel-org-tag-action
                :caller 'counsel-org-tag))))
#+END_SRC

*** Indirect Narrow Buffers

#+BEGIN_SRC elisp
(set-popup-rule! "^\\*Org Indirect" :side 'bottom :size 0.35 :quit t :transient t :ttl t :select t)

(defun +org|narrow-subtree-indirect (&optional visit-fn)
  "Narrow to an indirect buffer in a popup."
  (interactive)
  ;; Cleanup old indirect buffers
  (kill-matching-buffers "^\\*Org Indirect.*" nil t)
  (let ((buffer
         (save-window-excursion
           (when visit-fn (funcall visit-fn))
           ;; Why do i need this message?
           (message "%s" (buffer-name))
           (clone-indirect-buffer
            (generate-new-buffer-name (template "*Org Indirect <<(buffer-name)>> "))
            nil))))
    (with-current-buffer buffer
      (widen)
      (org-narrow-to-subtree)
      (pop-to-buffer buffer)
      (rename-buffer (concat
                      (buffer-name)
                      (int-to-string (point-min))
                      (int-to-string (point-max))
                      "*")))))

(defun +org/kill-indirect-buffer-maybe ()
  "Kill the window/buffer if it's indirect.
For example when archiving a task, there would be an empty window left over."
  (when (s-match "^\\*Org Indirect" (buffer-name))
    (kill-buffer-and-window)))

(defun +org/todo-state-subtask? ()
  "If the current taks item is a subtask (which is marked by [ ])."
  (if-let ((state (org-get-todo-state)))
      (string-match-p (concat "^\\" "[") state)))

(defun +org|clock-visit-entry ()
  "Visit currently clocked org entry in a narrowed indirect buffer."
  (interactive)
  (let ((org-agenda-follow-indirect t))
    (+org|narrow-subtree-indirect #'org-clock-goto)))

(defun +org|agenda-visit-entry ()
  "Visit agenda entry in a narrowed indirect buffer."
  (interactive)
  (+org|narrow-subtree-indirect #'org-agenda-switch-to))
;; When narrowed on a subtask, narrow to the next parent task
;; (when (+org/todo-state-subtask?)
;;   (save-excursion
;;     (progn
;;       (widen)
;;       (org-up-element)
;;       (while (and (eq (org-get-todo-state) nil)
;;                   (eq (+org/todo-state-subtask?) nil))
;;         (org-up-element)
;;         (org-narrow-to-subtree))))))
#+END_SRC

** Utils
*** Get Frontmost chrome url

#+BEGIN_SRC elisp
(defun +org/get-frontmost-chrome-url-raw ()
  "Get just the url for the frontmost chrome instance."
  (interactive)
  (--> (org-mac-chrome-get-frontmost-url)
       (s-match org-bracket-link-regexp it)
       (nth 1 it)))
#+END_SRC

*** Add source property from chrome

#+BEGIN_SRC elisp
(defun +org|source-properties-key-from-browser ()
  "Add the link from the frontmost chrome tab as a source property."
  (interactive)
  (org-set-property "SOURCE" (org-mac-chrome-get-frontmost-url)))
#+END_SRC

*** Archive all done tasks

#+BEGIN_SRC elisp :tangle no
(defun +org|archive-done-tasks ()
  "Archive tasks with DONE or CANCELED todo state."
  (interactive)
  (org-map-entries
   (lambda ()
     (org-archive-subtree)
     (setq org-map-continue-from (outline-previous-heading)))
   "/+{|DONE|CANCELED}" 'tree))
#+END_SRC

*** Archive and Done

#+BEGIN_SRC elisp
(defun +org|archive-and-done ()
  "Mark task as done and archive."
  (interactive)
  (org-todo "DONE")
  (org-archive-subtree)
  (+org/kill-indirect-buffer-maybe))

(defun +org|agenda-archive-and-done ()
  "Mark agenda task as done and archive."
  (interactive)
  (org-agenda-todo "DONE")
  (org-agenda-archive)
  (+org/kill-indirect-buffer-maybe))
#+END_SRC

*** Copy block to clipboard

#+BEGIN_SRC elisp
(defun +org|copy-block ()
  "Copies the current block to clipboard."
  (interactive)
  (org-edit-src-code)
  (clipboard-kill-ring-save (point-min) (point-max)))
#+END_SRC

*** Export As Markdown

#+BEGIN_SRC elisp
(defun +org/copy-as-markdown (&optional subtree-p)
  "Copy the current subtree as markdown to clipboard."
  (let* ((org-export-with-toc nil)
         (org-export-with-special-strings nil)
         (org-export-with-smart-quotes nil)
         (md (org-export-as 'md nil subtree-p)))
    (kill-new md)
    (message "Copied buffer as markdown to clipboard.")))

(defun +org|copy-buffer-as-markdown ()
  "Copy the entire buffer as markdown to clipboard."
  (interactive)
  (+org/copy-as-markdown))

(defun +org|copy-subtree-as-markdown ()
  "Copy the subtree as markdown to clipboard."
  (interactive)
  (+org/copy-as-markdown t))
#+END_SRC

*** Org Attach
**** Download

#+BEGIN_SRC elisp
(defun +org-attach/downloads-file (file)
  "Attach a file in your downloads-directory."
  (interactive (list (read-file-name "Attach File: " downloads-dir)))
  (+org/attach-file-and-insert-link file))
#+END_SRC

**** Screenshot

#+BEGIN_SRC elisp
(defun +org-attach/last-screenshot ()
  "Attaches the last screenshot"
  (interactive)
  (+org-attach/file (+file/latest-file-in-dir screenshot-dir)))
#+END_SRC

*** Paste Chrome Link Fix

Fixes wrong paste behaviour where the link would be inserted directly on the character by adding a space

E.g.: (Brackets signal the cursor position)

: **[*]
: ***[]"

#+BEGIN_SRC elisp
(defun +org|paste-chrome-link ()
  "Paste the frontmost chrome link."
  (interactive)
  (--> (+wm/last-chrome-window-org-link)
       (cond
        ;; Visual Selection
        ;; ((region-active-p) (replace-region-contents it))
        ;; Normal
        (t (insert it)))))
#+END_SRC

*** Paste Markdown as org

#+BEGIN_SRC elisp
(defun +org|paste-markdown-as-org ()
  "Convert the current clipboard to markdown."
  (interactive)
  (insert (shell-command-to-string "xclip -selection clipboard -out | pandoc -f markdown -t org")))
#+END_SRC

*** Schedule Tomorrow
:PROPERTIES:
:SOURCE:   [[https://github.com/xandeer/.doom/blob/master/modules/private/xandeer/+org.el][.doom/+org.el at master · xandeer/.doom]]
:END:

#+BEGIN_SRC elisp
(defun +org|schedule-tomorrow ()
  "Return scheduled string on tomorrow."
  (format-time-string "SCHEDULED: <%F %a>"
                      (time-add (current-time) (* 24 3600))))
#+END_SRC

*** Sort org entries

#+BEGIN_SRC elisp
(defun +org|sort-entries ()
  "Go to header and sort entries."
  (interactive)
  (org-up-element)
  (org-sort)
  (org-shifttab)
  (org-cycle))
#+END_SRC

*** Visit archive file

#+BEGIN_SRC elisp
(defun +org|visit-archive-file ()
  (interactive)
  (let ((archive-filename (car (org-archive--compute-location org-archive-location))))
    (find-file archive-filename)
    (end-of-buffer)))
#+END_SRC

*** Align all tags

#+BEGIN_SRC elisp
(defun +org|align-all-tags ()
  "Interactive version of org-align-all-tags."
  (interactive)
  (org-align-tags t))
#+END_SRC

*** Org get chrome tab formatted

The Github Review Title is very long,
shorten it a bit for the org capture templates.

#+BEGIN_SRC elisp
(defun +github/just-pr-title (title)
  (car (s-split " · " title)))

(defun +org/mac-chrome-get-frontmost-url-custom-format ()
  "Adaption for org-as-mac-chrome-get-frontmost-url."
    (--> (org-as-mac-chrome-get-frontmost-url)
         (s-split "::split::" it)
         (pcase it
           ((pred (s-contains? "github.com" (-first-item it)))
            (-update-at (- (length it) 1)
                        #'+github/just-pr-title
                        it))
           (_ it))
         (s-join "::split::" it)
         (org-mac-paste-applescript-links it)))
#+END_SRC

*** Custom Agenda Compare

Sort my agenda entries by a ~DATE_CREATED~ property.

#+BEGIN_SRC elisp
(setq-default +org-created-property "CREATED")
#+END_SRC

#+BEGIN_SRC elisp
(defun +org|compare-created-date-property (a b)
  "Compare two `org-mode' agenda entries, `A' and `B', by the \"CREATED\" property."
  (let* ((a-pos (get-text-property 0 'org-marker a))
         (b-pos (get-text-property 0 'org-marker b))
         (a-date (or (org-entry-get a-pos +org-created-property)
                     (format "<%s>" (org-read-date t nil "now"))))
         (b-date (or (org-entry-get b-pos +org-created-property)
                     (format "<%s>" (org-read-date t nil "now"))))
         (cmp (compare-strings a-date nil nil b-date nil nil)))
    (if (eq cmp t) nil (signum cmp))))
#+END_SRC

*** Search in notes

#+BEGIN_SRC elisp
(after! ivy
  (ivy-set-actions
   '+org|search-in-notes
   '(("j" counsel-notes-find-file-other-window "open in other window"))))

(defun +org|search-in-notes ()
  "Search in the org directory for a file.
Projectile search is not fast reliable enough."
  (interactive)
  (counsel-notes-jump))

(defun counsel-notes-find-file (x)
  "Function docstring"
  (interactive)
  (with-ivy-window
    (let ((default-directory (ivy-state-directory ivy-last)))
      (find-file (expand-file-name x))
      (+workspaces-add-current-buffer-h))))

(defun counsel-notes-find-file-other-window (x)
  (split-window nil nil 'right)
  (counsel-notes-find-file x))

(defun +org/counsel-notes-jump:files ()
  "Function docstring"
  (interactive)
  (--> '("Main" "Work")
       (--map (f-join org-directory it) it)
       (-map 'f-files it)
       -flatten
       (--map (s-replace (concat (expand-file-name org-directory) "/") "" it) it)))

(defun counsel-notes-jump ()
  "Jump to a file in your notes and call org-goto right-away."
  (interactive)
  (counsel-require-program find-program)
  (let ((default-directory org-directory))
    (ivy-read "Find directory: "
              (+org/counsel-notes-jump:files)
              :matcher #'counsel--find-file-matcher
              :action #'counsel-notes-find-file
              :history 'file-name-history
              :keymap counsel-find-file-map
              :caller 'counsel-dired-jump)))
#+END_SRC

*** Find in files

#+BEGIN_SRC elisp
(defun +org/find-in-files (file)
  "Find file in org directory."
  (find-file (f-join org-directory file)))
#+END_SRC
*** Rename Attachment

#+BEGIN_SRC elisp
(defun +org-attach|rename-attachment ()
  "Rename the attachment under the cursor."
  (interactive)
  (save-excursion
    (while (not (org-element-link-parser))
      (backward-char))
    (if-let* ((link (org-element-link-parser))
              (filename (org-element-property :path link))
              (begin (org-element-property :begin link))
              (end (org-element-property :end link))

              (path (f-join org-attach-directory filename))
              (new-path (let ((ivy--directory org-attach-directory))
                          (counsel-find-file-move path)))
              (new-filename (s-replace org-attach-directory "" new-path))
              (new-attach-link (template "[[attach:<<new-filename>>]]")))
        (progn
          (delete-region begin end)
          (insert new-attach-link)))))
#+END_SRC
*** Visual Fill Column

#+BEGIN_SRC elisp
(defun +org|toggle-visual-wrap (&optional center?)
  "Toggle text wrapping for org buffers."
  (interactive)
  (let ((visual-fill-column-center-text (or center? nil)))
    (if (bound-and-true-p visual-line-mode)
        (progn
          (visual-line-mode -1)
          (visual-fill-column-mode -1))
      (progn
        (visual-line-mode)
        (visual-fill-column-mode)))))
#+END_SRC
*** Agenda Cut Entry

#+BEGIN_SRC elisp
(defun +org|agenda-cut-entry ()
  "Cut entry straight from agenda."
  (interactive)
  (save-window-excursion
    (org-agenda-switch-to)
    (org-cut-subtree))
  (org-agenda-redo))
#+END_SRC

*** Agenda Change Link

#+BEGIN_SRC elisp
(defun +org|agenda-change-link ()
  "Change a link in the title from the org agenda."
  (interactive)
  (save-window-excursion
    (org-agenda-switch-to)
    (when (search-forward "[[" (point-at-eol) t)
      (call-interactively #'org-insert-link))
    (org-agenda-redo)))
#+END_SRC

*** Move to shopping list

Moves a todo item from the agenda to the shopping list as a list item.

#+BEGIN_SRC elisp
(defun +org|agenda-move-to-shopping-list ()
  "Function docstring"
  (interactive)
  (save-window-excursion
    (save-excursion
      (let ((title (nth 1 (s-match "^.*TODO \\(.*\\)$" (thing-at-point 'line t))))
            (buffer (find-file org-shopping-list-file)))
        (with-current-buffer buffer
          (org-narrow-to-subtree)
          (goto-char (point-max))
          (insert (template "\n- [ ] <<title>>"))
          (org-update-checkbox-count t)
          (save-buffer)))))
  (+org|agenda-archive-and-done))
#+END_SRC
*** Export named table
:PROPERTIES:
:SOURCE:   [[https://emacs.stackexchange.com/questions/16640/can-i-export-a-specific-table-in-an-org-file-to-csv-from-the-command-line][org mode - Can I export a specific table in an org file to csv from the command line? - Emacs Stack Exchange]]
:END:

#+BEGIN_SRC elisp
(defun +org|export-named-table (name &optional dir)
  "Export table in org document with NAME property to a DIR.
Return the path of the file."
  (interactive)
  (show-all)
  (let ((case-fold-search t))
    (save-excursion
      (goto-char (point-min))
      (if (search-forward-regexp (concat "#\\+NAME: +" name) nil t)
          (progn
            (next-line)
            (let ((filename (file-truename (f-join (or dir "./") (format "%s.csv" name)))))
              (org-table-export filename "orgtbl-to-csv")
              filename))))))
#+END_SRC

*** Refile Helpers
:PROPERTIES:
:SOURCE:   [[https://mollermara.com/blog/Fast-refiling-in-org-mode-with-hydras/][Fast refiling in org-mode with hydras | Josh Moller-Mara]]
:END:

#+BEGIN_SRC elisp
(defun +org/refile (file headline &optional arg)
  (let ((file (f-join org-directory file))
        (pos (save-excursion
               (find-file file)
               (org-find-exact-headline-in-buffer headline))))
    (org-refile arg nil (list headline file nil pos))))

(defun +org/agenda-refile (file headline &optional arg)
  (save-window-excursion
    (let* ((file (f-join org-directory file))
           (pos (save-excursion
                  (find-file file)
                  (org-find-exact-headline-in-buffer headline))))
      (org-agenda-refile arg (list headline file nil pos) t))))
#+END_SRC
*** Cut Link

#+BEGIN_SRC elisp
(defun +org|cut-link ()
  "Remove the item under the cursor but copy the link."
  (interactive)
  (require 'om)
  (let ((link (->> (om-parse-this-headline)
                   (om-get-property :raw-value))))
    (org-cut-subtree)
    (kill-new link)))
#+END_SRC

** Package Config
*** Org Caldav

Calendar management using org mode and [[https://github.com/dengste/org-caldav][org-caldav]].

To sync the calendars use ~org-caldav-sync~.

#+BEGIN_SRC elisp
(use-package! org-caldav
  :after org
  :commands (org-caldav-sync)
  :config
  ;; org-caldav-url is set in secrets.el
  (setq org-caldav-calendar-id "family"
        org-caldav-inbox (f-join org-directory "Main/calendar-family.org")
        org-caldav-save-directory doom-cache-dir
        org-caldav-sync-direction 'cal->org
        org-icalendar-timezone "Europe/Berlin")
  (setq org-caldav-files (list org-caldav-inbox)))
#+END_SRC

*** Org QL

#+BEGIN_SRC elisp
(use-package! org-ql
  :commands (org-ql-search))
#+END_SRC

*** Org SuperAgenda
**** Config

#+BEGIN_SRC elisp
(use-package! org-super-agenda
  :after org
  :config
  (org-super-agenda-mode 1)
  ;; Disable org-super-agenda keymap which breaks evil mappings
  (setq org-super-agenda-header-map (make-sparse-keymap)))
#+END_SRC

**** Utils
***** Move between super agenda sections

#+BEGIN_SRC elisp
(defun +org-agenda/goto-super-agenda-group (forward?)
  "Move the cursor to a super agenda group."
  (let ((is-at-agenda-header
         (lambda () (eq (get-text-property (point) 'face) 'org-super-agenda-header)))
        (line-move-fn (if forward? #'next-line #'previous-line))
        (char-move-fn (if forward? #'forward-char #'backward-char)))

    ;; When the cursor is on a group already
    (if (funcall is-at-agenda-header)
        (funcall line-move-fn))

    ;; Special case for moving backward
    ;; Since moving backward would just stop at the current header
    (if (and (not forward?) (not (funcall is-at-agenda-header)))
        (progn
          (while (not (funcall is-at-agenda-header))
            (backward-char))
          (previous-line)
          (previous-line)))

    ;; Find the next header
    (while (not (funcall is-at-agenda-header))
      (funcall char-move-fn))

    ;; Move below the header to the first item
    (if (funcall is-at-agenda-header)
        (progn
          (next-line)
          (beginning-of-line)
          (back-to-indentation)))))

(defun +org-agenda|next-super-agenda-group ()
  "Move the cursor to the next super agenda group."
  (interactive)
  (+org-agenda/goto-super-agenda-group t))

(defun +org-agenda|prev-super-agenda-group ()
  "Move the cursor to the previous super agenda group."
  (interactive)
  (+org-agenda/goto-super-agenda-group nil))
#+END_SRC

*** Org Media Info

#+BEGIN_SRC elisp
(use-package! org-media-info
  :commands (org-media-insert-book org-media-insert-book-german))
#+END_SRC

*** Org Noter & PDF
**** Config

#+BEGIN_SRC elisp
(use-package! org-noter
  :commands (org-noter))
#+END_SRC

**** Utils
***** Go to org-noter location

#+BEGIN_SRC elisp
(defun +org-noter|goto ()
  (interactive)
  (select-window (org-noter--get-notes-window))
  (counsel-org-goto)
  (org-noter-sync-current-note))
#+END_SRC

***** Flip between pages

#+BEGIN_SRC elisp :tangle no
;; (defcustom +pdf-flip-pages nil
;;   "Pageset"
;;   :type 'list)

;; (defun +pdf|flip-between ()
;;   (let ((current-page (pdf-view-current-page))))

;;   (cond ((eq +pdf-flip-pages)))
;;   (if +pdf-flip-pages)

;;   (let (())
;;     (pdf-history-backward)
;;     (setq +pdf-flip-pages (list (pdf-view-current-page) current-page))))
#+END_SRC

**** Bindings

#+BEGIN_SRC elisp
(map! :map pdf-view-mode-map
      :n "C-o" #'pdf-history-backward)

(map! :map (org-noter-doc-mode-map org-noter-doc-mode-map)
      :localleader
      :desc "Next Note" "g" #'+org-noter|goto
      :desc "Next Note" "n" #'org-noter-sync-next-note
      :desc "Next Note" "k" #'org-noter-sync-next-note
      :desc "Next Note" "p" #'org-noter-sync-prev-note
      :desc "Next Note" "j" #'org-noter-sync-prev-note)
#+END_SRC
*** Org Download

Copy screenshots from the clipboard to an attachment.

**** Config

Set my preferred clipboard paste method to ~xclip~.

#+BEGIN_SRC elisp
(setq org-download-screenshot-method "xclip -selection clipboard -t image/png -o > %s")
#+END_SRC
*** Counsel Org Clock

#+BEGIN_SRC elisp
(use-package! counsel-org-clock
  :after org)
#+END_SRC

** Bindings
*** Local Leader Bindings
**** Local Leader Mapping
***** Org Mode

#+BEGIN_SRC elisp
(defun +org-my-init-keybinds-h ()
  (map! :map org-mode-map
        :localleader
        :desc  "Goto Archive"              "$"  #'+org|visit-archive-file
        :desc  "Align Tags"                "%"  #'+org|align-all-tags
        :desc  "Schedule Tomorrow"         "+"  #'+org|schedule-tomorrow
        :desc  "Archive Subtree and Done"  "A"  #'+org|archive-and-done
        :desc  "Grab tabs"                 "P"  #'+org|grab-chrome-tabs
        :desc  "Paste Subtree"             "P"  #'org-paste-subtree
        :desc  "Sort Entries"              "S"  #'+org|sort-entries
        :desc  "Archive Subtree"           "a"  #'org-archive-subtree
        :desc  "Deadline"                  "d"  #'org-deadline
        :desc  "Filter"                    "f"  #'org-match-sparse-tree
        :desc  "Set source key to tab"     "k"  #'+org|source-properties-key-from-browser
        :desc  "Create/Edit Todo"          "o"  #'org-todo
        :desc  "Paste Chrome Link"         "p"  #'+org|paste-chrome-link
        :desc  "Tag heading"               "q"  #'+org|counsel-org-tag
        :desc  "Schedule"                  "s"  #'org-schedule
        :desc  "Tag heading"               "t"  #'+org|counsel-org-tag
        :desc  "Copy Buffer To Markdown"   "y"  #'+org|copy-buffer-as-markdown

        (:prefix-map ("C" . "Cut")
          :desc "Item" "C" 'org-cut-subtree
          :desc "Link" "L" '+org|cut-link)

        (:prefix-map ("i" . "Insert")
          :desc "Inavtive Timestamp" "i" 'org-time-stamp-inactive
          :desc "Subheadeing"        "s" (λ!
                                          (call-interactively 'org-insert-subheading)
                                          (evil-insert-state)))

        (:prefix-map ("f" . "Attach File")
          :desc "Downloads File"  "d" '+org-attach/downloads-file
          :desc "File"            "f" '+org-attach/file
          :desc "Screenshot"      "s" '+org-attach/last-screenshot
          :desc "URI"             "u" '+org/attach-file-and-insert-link)

        (:prefix-map ("g" . "Goto")
          :desc "Org Web Link" "l" #'+org-web-tools/read-url-at-point)

        (:prefix-map ("n" . "Narrow")
          :desc "Block"                "b" #'org-narrow-to-block
          :desc "Element"              "e" #'org-narrow-to-element
          :desc "Indirect Buffer Tree" "i" #'org-tree-to-indirect-buffer
          :desc "Subtree"              "s" #'org-narrow-to-subtree
          :desc "widen"                "w" #'widen)

        (:prefix-map ("w" . "Refile")
          :desc "Dynamic"            "w" 'org-refile
          :desc "Pinboard"           "p" '+pinboard|refile
          :desc "To GTD Backlog"     "b" (λ! (+org/refile "Main/gtd.org" "GTD Backlog"))
          :desc "To GTD"             "g" (λ! (+org/refile "Main/gtd.org" "GTD")))))

(advice-add '+org-init-keybinds-h :after '+org-my-init-keybinds-h)
#+END_SRC

***** Agenda

#+BEGIN_SRC elisp
(defun +org-my-init-agenda-keybinds-h ()
  (map! :after org-agenda
        :map org-agenda-mode-map
        :localleader
        "q" #'+org|counsel-org-tag
        (:prefix ("w" . "Refile")
          :desc "Dynamic"            "w" 'org-agenda-refile
          :desc "Pinboard"           "p" '+pinboard|refile-agenda
          :desc "To GTD Backlog"     "b" (λ! (+org/agenda-refile "Main/gtd.org" "GTD Backlog"))
          :desc "To GTD"             "g" (λ! (+org/agenda-refile "Main/gtd.org" "GTD"))
          :desc "To Reading List"    "r" (λ! (+org/agenda-refile "Main/reading-list.org" "Reading List"))
          :desc "To shoppping list"  "s" (λ! (+org/agenda-refile "Main/shoppinglist.org" "Supermarket"))
          :desc "To Work"            "W" (λ! (+org/agenda-refile "Work/work.org" "Work Todos")))))

(advice-add '+org-init-keybinds-h :after '+org-my-init-agenda-keybinds-h)
#+END_SRC

#+RESULTS:

**** Meta Mapping

#+BEGIN_SRC elisp
(map! :g "s-X" #'+org-capture/open-frame)

(map! :map org-mode-map
      :gni [s-return]    #'+org/insert-item-below
      :gni [s-S-return]  #'+org/insert-item-above
      :n "M-k"           #'org-metaup
      :n "M-j"           #'org-metadown)
#+END_SRC

**** Agenda Mapping
***** Evil Customization

#+BEGIN_SRC elisp
(map! :after evil-org-agenda
      :map evil-org-agenda-mode-map
      :m "RET"    #'+org|agenda-visit-entry
      :m [return] #'+org|agenda-visit-entry
      :m "K"      #'+org-agenda|prev-super-agenda-group
      :m "J"      #'+org-agenda|next-super-agenda-group
      :m "da"     #'org-agenda-archive
      :m "dA"     #'+org|agenda-archive-and-done)
#+END_SRC

***** Org Agenda Keybindings

#+BEGIN_SRC elisp
(map! :map org-agenda-mode-map
      :m "C-c C-l" #'+org|agenda-change-link
      :desc "Org Window Left" "C-h" #'evil-window-left
      :desc "Org Window Left" "C-l" #'evil-window-right)
#+END_SRC

*** Leader Bindings

#+BEGIN_SRC elisp
(map!
 :leader
 (:prefix-map ("t" . "Toggle")
   :desc "Visal Fill Column"          "o" #'+org|toggle-visual-wrap
   :desc "Visal Fill Column (Center)" "O" (λ! (+org|toggle-visual-wrap)))

 (:prefix-map ("n" . "Notes")
   :desc "Save All Org Buffers"       "S" #'org-save-all-org-buffers
   :desc "Save All Org Buffers"       "s" #'+default/org-notes-search
   :desc "Find in notes"              "n" #'+org|search-in-notes
   :desc "Agenda"                     "a" #'org-agenda
   :desc "Store Link"                 "y" #'org-store-link

   (:prefix-map ("b" . "Bookmarks")
    :desc "Goto Bookmarks File"       "b" (λ! (find-file org-pinboard-file))
    :desc "Search bookmarks"          "s" #'helm-org-pinboard)

   ;; special goto locations I often visit
   :desc "Inbox"                      "i" (λ! (+org/find-in-files "Main/inbox.org"))
   :desc "Work"                       "w" (λ! (+org/find-in-files "Work/work.org"))

   (:prefix-map ("g" . "Goto")
    :desc "Goto Bookmarks File"       "b" (λ! (find-file org-pinboard-file))
    :desc "Inbox"                     "i" (λ! (+org/find-in-files "Main/inbox.org"))
    :desc "Work"                      "w" (λ! (+org/find-in-files "Work/work.org"))
    :desc "Inbox"                     "i" (λ! (+org/find-in-files "Main/inbox.org"))
    :desc "Shoppinglist"              "s" (λ! (+org/find-in-files "Main/shoppinglist.org"))
    :desc "Capture Last Stored"       "c" #'org-capture-goto-last-stored
    :desc "Refile Last Stored"        "r" #'org-refile-goto-last-stored)

   (:prefix-map ("c" . "clock")
     :desc "Timestamp Down"           "-" #'org-clock-timestamps-down
     :desc "Timestamp Up"             "=" #'org-clock-timestamps-up
     :desc "Clock Out"                "C" #'org-clock-out
     :desc "Goto Select"              "G" (λ! (org-clock-goto 'select))
     :desc "Clock In"                 "c" #'org-clock-in
     :desc "Mark Default Task"        "d" #'org-clock-mark-default-task
     :desc "Modify Effort Estimate"   "e" #'org-clock-modify-effort-estimate
     :desc "Goto Current"             "g" #'counsel-org-clock-history
     :desc "Resolve"                  "r" #'org-resolve-clocks
     :desc "Clock In Last"            "l" #'org-clock-in-last
     :desc "Cancel"                   "x" #'org-clock-cancel)))
#+END_SRC
*** Fixes
**** Evil replace with register fixes

I've mapped ~gr~ with ~evil-replace-with-register~ and doom tries to override this.

#+BEGIN_SRC elisp
(use-package! evil-org
  :config
  (map! :map evil-org-mode-map
        :n "gr" nil
        :n "gR" nil))
#+END_SRC
