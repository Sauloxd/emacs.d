#+TITLE: Utils
#+AUTHOR: Florian Schrödl (floscr)
#+PROPERTY: header-args :emacs-lisp :tangle yes :comments link
#+STARTUP: org-startup-folded: showall
#+BEGIN_SRC emacs-lisp
;; -*- lexical-binding: t -*-
#+END_SRC

* Required Packages

Packages and utilities needed for this config.

- [[https://github.com/magnars/dash.el][magnars/dash.el: List Manipulation]]
- [[https://github.com/magnars/s.el][magnars/s.el: String Manipulation]]

#+BEGIN_SRC elisp
(require 'dash)
(require 's)
(require 'f)
#+END_SRC

* Macros
** Aliases

#+BEGIN_SRC elisp
;;;###autoload
(defalias 'λ 'lambda)
#+END_SRC

** Without undo

#+BEGIN_SRC elisp
;;;###autoload
(defmacro without-undo (&rest forms)
  "Executes FORMS with a temporary buffer-undo-list that is discarded afterwards.
Taken from http://www.emacswiki.org/emacs/UndoCommands with some
modifications."
  `(let* ((buffer-undo-list)
          (modified (buffer-modified-p))
          (inhibit-read-only t))
     (unwind-protect
         (progn ,@forms)
       (set-buffer-modified-p modified)) ()))
#+END_SRC


** Template Literals
:PROPERTIES:
:SOURCE:   https://gist.github.com/cbowdon/012d623920bd28453bf8
:END:

#+BEGIN_SRC elisp :tangle no
(template "2 = <<(+ 1 1)>>")
#+END_SRC

#+RESULTS:
: 2 = 2

#+BEGIN_SRC elisp
;;;###autoload
(defmacro template (text)
  "Template literals"
  (let ((pattern "<<\\(.*?\\)>>"))
    ;; The regexp matches anything between delimiters, non-greedily
    (with-temp-buffer
      (save-excursion (insert text))
      (let ((matches '()))
        (while (re-search-forward pattern nil t)
          (push (match-string 1) matches)
          (replace-match "%s" t t))
        `(format ,(buffer-string) ,@(reverse (mapcar 'read matches)))))))
#+END_SRC
** Ignore Arguments
:PROPERTIES:
:SOURCE:   https://emacs.stackexchange.com/a/33063
:END:

#+BEGIN_SRC elisp
;;;###autoload
(defmacro η (fnc)
  "Return function that ignores its arguments and invokes FNC."
  `(lambda (&rest _rest)
     (funcall ,fnc)))
#+END_SRC

* General Utils
** Kill and Message

#+BEGIN_SRC elisp
(defun copy-message (x)
  "Executes kill-new but with a message log side effect."
  (kill-new x)
  (message "Copied to clipboard: %s" x))
#+END_SRC

** Run current file
:PROPERTIES:
:SOURCE:   http://ergoemacs.org/emacs/emacs.html
:END:

#+BEGIN_SRC elisp
(defun run-current-file ()
  "Execute or compile the current file.
For example, if the current buffer is the file x.pl,
then it'll call “perl x.pl” in a shell.
The file can be php, perl, python, ruby, javascript, bash, ocaml, vb, elisp.
File suffix is used to determine what program to run.

If the file is modified, ask if you want to save first. (This command always run the saved version.)

If the file is emacs lisp, run the byte compiled version if exist."
  (interactive)
  (let (suffixMap fName fSuffix progName cmdStr)

    ;; a keyed list of file suffix to comand-line program path/name
    (setq suffixMap
          '(("php" . "php")
            ;; ("coffee" . "coffee -p")
            ("pl" . "perl")
            ("py" . "python")
            ("rb" . "ruby")
            ("js" . "node")             ; node.js
            ("sh" . "bash")
            ("ml" . "ocaml")
            ("vbs" . "cscript")))
    (setq fName (buffer-file-name))
    (setq fSuffix (file-name-extension fName))
    (setq progName (cdr (assoc fSuffix suffixMap)))
    (setq cmdStr (concat progName " \""   fName "\""))

    (when (buffer-modified-p)
      (progn
        (when (y-or-n-p "Buffer modified. Do you want to save first?")
          (save-buffer))))

    (if (string-equal fSuffix "el") ; special case for emacs lisp
        (progn
          (load (file-name-sans-extension fName)))
      (if progName
          (progn
            (message "Running…")
            ;; (message progName)
            (shell-command cmdStr "*run-current-file output*"))
        (message "No recognized program file suffix for this file.")))))
#+END_SRC

** Shuffle List
:PROPERTIES:
:SOURCE:   [[http://kitchingroup.cheme.cmu.edu/blog/2014/09/06/Randomize-a-list-in-Emacs/][Randomize a list in Emacs]]
:END:

#+BEGIN_SRC elisp
(defun swap-list-items (LIST el1 el2)
  "in LIST swap indices EL1 and EL2 in place"
  (let ((tmp (elt LIST el1)))
    (setf (elt LIST el1) (elt LIST el2))
    (setf (elt LIST el2) tmp)))

(defun -shuffle (LIST)
  "Shuffle the elements in LIST.
shuffling is done in place."
  (loop for i in (reverse (number-sequence 1 (1- (length LIST))))
        do (let ((j (random (+ i 1))))
             (swap-list-items LIST i j)))
  LIST)
#+END_SRC
** Eval and Replace sexp
:PROPERTIES:
:SOURCE:   https://emacsredux.com/blog/2013/06/21/eval-and-replace/
:END:

#+BEGIN_SRC elisp
(defun eval-and-replace-sexp ()
  "Replace the preceding sexp with its value."
  (interactive)
  (right-char) ;; Fix for normal mode
  (backward-kill-sexp)
  (condition-case nil
      (prin1 (eval (read (current-kill 0)))
             (current-buffer))
    (error (message "Invalid expression")
           (insert (current-kill 0)))))
#+END_SRC

** Buffer
*** Check current line for regex

#+BEGIN_SRC elisp
;;;###autoload
(defun buf-line-has (regexp)
  "Check for REGEXP at current line."
  (save-excursion
    (goto-char (point-at-bol))
    (search-forward-regexp regexp (point-at-eol) t)))
#+END_SRC

*** Matches in buffer

#+BEGIN_SRC elisp
(defun -buffer-matches (regexp &optional match-number buffer)
  "return a list of matches of REGEXP in BUFFER or the current buffer if not given."
  (let ((matches))
    (save-match-data
      (save-excursion
        (with-current-buffer (or buffer (current-buffer))
          (save-restriction
            (widen)
            (goto-char 1)
            (while (search-forward-regexp regexp nil t 1)
              (push (match-string (or match-number 0)) matches)))))
      matches)))
#+END_SRC

** Async Command No Window
:PROPERTIES:
:SOURCE:   [[https://stackoverflow.com/a/47910509/2298462][How to avoid pop-up of *Async Shell Command* buffer in Emacs?]]
:END:

Prevent ~async-shell-command~ displaying a popup or a buffer.

#+BEGIN_SRC elisp
(defun async-shell-command-no-window (command)
  "Execute async command without showing the result buffer."
  (interactive)
  (let ((display-buffer-alist (list (cons "\\*Async Shell Command\\*.*" (cons #'display-buffer-no-window nil)))))
    (async-shell-command command)))
#+END_SRC
** Shell command to list

#+BEGIN_SRC elisp
(defun shell-command-to-list (cmd)
  "Split output from shell-command to list"
  (split-string (shell-command-to-string cmd) "\n" t))
#+END_SRC
** Delete Current Line

#+BEGIN_SRC elisp
(defun delete-current-line ()
  "Delete (not kill) the current line."
  (interactive)
  (save-excursion
    (delete-region
     (progn (forward-visible-line 0) (point))
     (progn (forward-visible-line 1) (point)))))
#+END_SRC

* Functional Utils
** Noop

#+BEGIN_SRC elisp
(defun noop (&optional args) nil)
#+END_SRC

** Tap

Run a side effect ~fn~ on the initial input ~x~.
But Return the original input ~x~.

#+BEGIN_SRC elisp
(defun -tap (fn x)
  "Function docstring"
  (funcall fn x)
  x)

(defmacro --tap (fn it)
  "Anaphoric form of `-tap'."
  `(-tap (lambda (it) ,fn) ,it))
#+END_SRC

** Log

Log the current input without breaking the pipe.

#+BEGIN_SRC elisp
(defun -log (x)
  "Function docstring"
  (--tap (message "%s" it) x))
#+END_SRC

** When Forward

#+BEGIN_SRC elisp
(defun -id-when (fn x)
  "When FN equals t forward X."
  (when (funcall fn x) x))
#+END_SRC

** String Match

#+BEGIN_SRC elisp
(defun s-match-or (regex x)
  "Return match groups or original"
  (interactive)
  (-if-let ((match (s-match regex x)))
      (cdr match)
    (list x)))

(defun s-match-or-1 (regex x)
  "Return 1st match group or original."
  (interactive)
  (-if-let ((match (s-match regex x)))
      (car (cdr match))
    x))
#+END_SRC

** Line Indent

#+BEGIN_SRC elisp
(defun +my/line-indent ()
  "Function docstring"
  (interactive)
  (or (-some->> (substring-no-properties (thing-at-point 'line))
        (s-match "^\\(\s*\\).*\n$")
        (nth 1)
        (length))
      0))
#+END_SRC

* Files

** File Timestamp

#+BEGIN_SRC elisp
;;;###autoload
(defun +file/timestamp (path)
  (->> (file-attributes path)
       (nth 5)))
#+END_SRC


** Get the latest file in directory
:PROPERTIES:
:SOURCE:   https://stackoverflow.com/a/30886283
:END:

Get the last created file in a directory.

#+BEGIN_SRC elisp
;;;###autoload
(defun +file/latest-file-in-dir (path)
  (->> (f-entries path)
       (-sort (lambda (a b) (not (time-less-p (+file/timestamp a)
                                              (+file/timestamp b)))))
       (car)))
#+END_SRC

** Chmod this file

#+BEGIN_SRC elisp
(defun +file|chmod-this-file ()
  "Chmod +x the current file."
  (interactive)
  (shell-command (template "chmod +x \"<<(buffer-file-name)>>\"")))
#+END_SRC

* UI
#+BEGIN_SRC elisp
(defun +ui/get-display-dpi (&optional display)
  "Get the DPI of DISPLAY.
DISPLAY is a display name, frame or terminal, as in
`display-monitor-attributes-list'."
  (cl-flet ((pyth (lambda (w h)
                    (sqrt (+ (* w w)
                             (* h h)))))
            (mm2in (lambda (mm)
                     (/ mm 25.4))))
    (let* ((atts (frame-monitor-attributes))
           (pix-w (cl-fourth (assoc 'geometry atts)))
           (pix-h (cl-fifth (assoc 'geometry atts)))
           (pix-d (pyth pix-w pix-h))
           (mm-w (cl-second (assoc 'mm-size atts)))
           (mm-h (cl-third (assoc 'mm-size atts)))
           (mm-d (pyth mm-w mm-h)))
      (/ pix-d (mm2in mm-d)))))

(defun +ui/adjust-font (size line-space &optional font-family)
  (let* ((font-family (or font-family)))
    (setq-default line-spacing line-space)
    (setq-default doom-font (font-spec :family font-family :size size))
    (setq-default doom--font-scale nil)
    (set-frame-font doom-font 'keep-size t)
    (doom/reload-font)
    (run-hooks 'after-setting-font-hook)))

(defun +ui/active-display-name ()
  (interactive)
  (-some-->
   (shell-command-to-string "xrandr | grep \"connected primary\"")
   (s-match "^\\w+" it)
   car))

(defun +ui|adjust-ui-to-display ()
  "Adjust the UI to the current attached display."
  (interactive)
  (cond
   ((string= system-name "Florians-iMac.local")
    (+ui/adjust-font 14 10 "Menlo"))
   ((string= system-name "thinknix")
    (if (string= (+ui/active-display-name) "eDP1")
        ;; Internal Screen
        (+ui/adjust-font 15 7 "Fira Code")
      ;; HiDPI External
      (+ui/adjust-font 18 9 "Fira Code")))
   ((string= system-name "Florians-MacBook-Air.local")
    (+ui/adjust-font 14 10 "Menlo"))))
#+END_SRC
* Elisp Helpers

** Get buffer in other window

#+BEGIN_SRC elisp
(defun +my/buffer-other-window ()
  "Return the buffer from the next window."
  (interactive)
  (save-window-excursion
    (other-window 1)
    (current-buffer)))
#+END_SRC
